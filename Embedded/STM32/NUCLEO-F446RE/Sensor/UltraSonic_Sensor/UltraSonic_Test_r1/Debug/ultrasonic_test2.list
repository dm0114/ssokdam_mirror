
ultrasonic_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000543c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800560c  0800560c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c4  080056c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056cc  080056cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056cc  080056cc  000156cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056d0  080056d0  000156d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08005744  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08005744  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea65  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f64  00000000  00000000  0002eb05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00030a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  000317c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022817  00000000  00000000  00032448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7e3  00000000  00000000  00054c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d207d  00000000  00000000  00064442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001364bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c4  00000000  00000000  00136510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055f4 	.word	0x080055f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080055f4 	.word	0x080055f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b974 	b.w	8000d8c <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468e      	mov	lr, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14d      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4694      	mov	ip, r2
 8000ace:	d969      	bls.n	8000ba4 <__udivmoddi4+0xe8>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b152      	cbz	r2, 8000aec <__udivmoddi4+0x30>
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	f1c2 0120 	rsb	r1, r2, #32
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aea:	4094      	lsls	r4, r2
 8000aec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	fbbe f6f8 	udiv	r6, lr, r8
 8000af6:	fa1f f78c 	uxth.w	r7, ip
 8000afa:	fb08 e316 	mls	r3, r8, r6, lr
 8000afe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b02:	fb06 f107 	mul.w	r1, r6, r7
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b12:	f080 811f 	bcs.w	8000d54 <__udivmoddi4+0x298>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 811c 	bls.w	8000d54 <__udivmoddi4+0x298>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b28:	fb08 3310 	mls	r3, r8, r0, r3
 8000b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b30:	fb00 f707 	mul.w	r7, r0, r7
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x92>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b40:	f080 810a 	bcs.w	8000d58 <__udivmoddi4+0x29c>
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	f240 8107 	bls.w	8000d58 <__udivmoddi4+0x29c>
 8000b4a:	4464      	add	r4, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b52:	1be4      	subs	r4, r4, r7
 8000b54:	2600      	movs	r6, #0
 8000b56:	b11d      	cbz	r5, 8000b60 <__udivmoddi4+0xa4>
 8000b58:	40d4      	lsrs	r4, r2
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0xc2>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80ef 	beq.w	8000d4e <__udivmoddi4+0x292>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x160>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xd4>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80f9 	bhi.w	8000d82 <__udivmoddi4+0x2c6>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0303 	sbc.w	r3, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	469e      	mov	lr, r3
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0e0      	beq.n	8000b60 <__udivmoddi4+0xa4>
 8000b9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ba2:	e7dd      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000ba4:	b902      	cbnz	r2, 8000ba8 <__udivmoddi4+0xec>
 8000ba6:	deff      	udf	#255	; 0xff
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 8092 	bne.w	8000cd6 <__udivmoddi4+0x21a>
 8000bb2:	eba1 010c 	sub.w	r1, r1, ip
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2601      	movs	r6, #1
 8000bc0:	0c20      	lsrs	r0, r4, #16
 8000bc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bce:	fb0e f003 	mul.w	r0, lr, r3
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x12c>
 8000bd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x12a>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2c0>
 8000be6:	4643      	mov	r3, r8
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x156>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x154>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2ca>
 8000c10:	4608      	mov	r0, r1
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c1a:	e79c      	b.n	8000b56 <__udivmoddi4+0x9a>
 8000c1c:	f1c6 0720 	rsb	r7, r6, #32
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	431c      	orrs	r4, r3
 8000c34:	40f9      	lsrs	r1, r7
 8000c36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c42:	0c20      	lsrs	r0, r4, #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fb09 1118 	mls	r1, r9, r8, r1
 8000c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c50:	fb08 f00e 	mul.w	r0, r8, lr
 8000c54:	4288      	cmp	r0, r1
 8000c56:	fa02 f206 	lsl.w	r2, r2, r6
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b8>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2bc>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2bc>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c88:	458e      	cmp	lr, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1e2>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2b4>
 8000c96:	458e      	cmp	lr, r1
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2b4>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ca6:	eba1 010e 	sub.w	r1, r1, lr
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x2a4>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x2a0>
 8000cb4:	b15d      	cbz	r5, 8000cce <__udivmoddi4+0x212>
 8000cb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cba:	eb61 010e 	sbc.w	r1, r1, lr
 8000cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000cc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cc6:	40f1      	lsrs	r1, r6
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	e9c5 7100 	strd	r7, r1, [r5]
 8000cce:	2600      	movs	r6, #0
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	40d8      	lsrs	r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf8:	0c0b      	lsrs	r3, r1, #16
 8000cfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000d02:	429e      	cmp	r6, r3
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x260>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b8>
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b8>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	b289      	uxth	r1, r1
 8000d20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d24:	fb07 3316 	mls	r3, r7, r6, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x28a>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d42:	3e02      	subs	r6, #2
 8000d44:	4461      	add	r1, ip
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0x104>
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e705      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e3      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6f8      	b.n	8000b4e <__udivmoddi4+0x92>
 8000d5c:	454b      	cmp	r3, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d6c:	4646      	mov	r6, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x28a>
 8000d70:	4620      	mov	r0, r4
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1e2>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b8>
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x12c>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e709      	b.n	8000b9a <__udivmoddi4+0xde>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x156>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <delay>:
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void delay (uint16_t time)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <delay+0x30>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 8000da2:	bf00      	nop
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <delay+0x30>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d3f9      	bcc.n	8000da4 <delay+0x14>
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000008c 	.word	0x2000008c
 8000dc4:	00000000 	.word	0x00000000

08000dc8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7f1b      	ldrb	r3, [r3, #28]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	f040 8083 	bne.w	8000ee0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000dda:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d11a      	bne.n	8000e18 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000de2:	2100      	movs	r1, #0
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f002 f9ab 	bl	8003140 <HAL_TIM_ReadCapturedValue>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a41      	ldr	r2, [pc, #260]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dee:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000df0:	4b3f      	ldr	r3, [pc, #252]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6a1a      	ldr	r2, [r3, #32]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 020a 	bic.w	r2, r2, #10
 8000e04:	621a      	str	r2, [r3, #32]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6a1a      	ldr	r2, [r3, #32]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f042 0202 	orr.w	r2, r2, #2
 8000e14:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 8000e16:	e063      	b.n	8000ee0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d15f      	bne.n	8000ee0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e20:	2100      	movs	r1, #0
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f002 f98c 	bl	8003140 <HAL_TIM_ReadCapturedValue>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a33      	ldr	r2, [pc, #204]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e2c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000e36:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000e42:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	4a2b      	ldr	r2, [pc, #172]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e00f      	b.n	8000e72 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000e52:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d909      	bls.n	8000e72 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e6c:	33ff      	adds	r3, #255	; 0xff
 8000e6e:	4a23      	ldr	r2, [pc, #140]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e70:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fb5c 	bl	8000534 <__aeabi_ui2d>
 8000e7c:	a31a      	add	r3, pc, #104	; (adr r3, 8000ee8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	f7ff fbd1 	bl	8000628 <__aeabi_dmul>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e96:	f7ff fcf1 	bl	800087c <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fdd3 	bl	8000a4c <__aeabi_d2uiz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000eac:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6a1a      	ldr	r2, [r3, #32]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 020a 	bic.w	r2, r2, #10
 8000ec2:	621a      	str	r2, [r3, #32]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a12      	ldr	r2, [r2, #32]
 8000ece:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0202 	bic.w	r2, r2, #2
 8000ede:	60da      	str	r2, [r3, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	b020c49c 	.word	0xb020c49c
 8000eec:	3fa16872 	.word	0x3fa16872
 8000ef0:	20000124 	.word	0x20000124
 8000ef4:	20000118 	.word	0x20000118
 8000ef8:	2000011c 	.word	0x2000011c
 8000efc:	20000120 	.word	0x20000120
 8000f00:	20000125 	.word	0x20000125
 8000f04:	2000008c 	.word	0x2000008c

08000f08 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2120      	movs	r1, #32
 8000f10:	480a      	ldr	r0, [pc, #40]	; (8000f3c <HCSR04_Read+0x34>)
 8000f12:	f000 ff5d 	bl	8001dd0 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000f16:	200a      	movs	r0, #10
 8000f18:	f7ff ff3a 	bl	8000d90 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2120      	movs	r1, #32
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <HCSR04_Read+0x34>)
 8000f22:	f000 ff55 	bl	8001dd0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HCSR04_Read+0x38>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <HCSR04_Read+0x38>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 0202 	orr.w	r2, r2, #2
 8000f34:	60da      	str	r2, [r3, #12]
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	2000008c 	.word	0x2000008c

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f48:	f000 fb74 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 f81c 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f50:	f000 f914 	bl	800117c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000f54:	f000 f878 	bl	8001048 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000f58:	f000 f8e6 	bl	8001128 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <main+0x38>)
 8000f60:	f001 fd5a 	bl	8002a18 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HCSR04_Read();
 8000f64:	f7ff ffd0 	bl	8000f08 <HCSR04_Read>
	 printf("%d cm\r\n",Distance);
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <main+0x3c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <main+0x40>)
 8000f70:	f003 fbb2 	bl	80046d8 <iprintf>
	 HAL_Delay(200);
 8000f74:	20c8      	movs	r0, #200	; 0xc8
 8000f76:	f000 fbcf 	bl	8001718 <HAL_Delay>
  {
 8000f7a:	e7f3      	b.n	8000f64 <main+0x20>
 8000f7c:	2000008c 	.word	0x2000008c
 8000f80:	20000125 	.word	0x20000125
 8000f84:	0800560c 	.word	0x0800560c

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	; 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2234      	movs	r2, #52	; 0x34
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 fb96 	bl	80046c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <SystemClock_Config+0xb8>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a22      	ldr	r2, [pc, #136]	; (8001040 <SystemClock_Config+0xb8>)
 8000fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <SystemClock_Config+0xb8>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <SystemClock_Config+0xbc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <SystemClock_Config+0xbc>)
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <SystemClock_Config+0xbc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 f9c5 	bl	800238c <HAL_RCC_OscConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001008:	f000 f908 	bl	800121c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	230f      	movs	r3, #15
 800100e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f000 feec 	bl	8001e04 <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001032:	f000 f8f3 	bl	800121c <Error_Handler>
  }
}
 8001036:	bf00      	nop
 8001038:	3750      	adds	r7, #80	; 0x50
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40007000 	.word	0x40007000

08001048 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <MX_TIM3_Init+0xd8>)
 8001074:	4a2b      	ldr	r2, [pc, #172]	; (8001124 <MX_TIM3_Init+0xdc>)
 8001076:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <MX_TIM3_Init+0xd8>)
 800107a:	2259      	movs	r2, #89	; 0x59
 800107c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <MX_TIM3_Init+0xd8>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <MX_TIM3_Init+0xd8>)
 8001086:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800108a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <MX_TIM3_Init+0xd8>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <MX_TIM3_Init+0xd8>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001098:	4821      	ldr	r0, [pc, #132]	; (8001120 <MX_TIM3_Init+0xd8>)
 800109a:	f001 fc15 	bl	80028c8 <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80010a4:	f000 f8ba 	bl	800121c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	4619      	mov	r1, r3
 80010b4:	481a      	ldr	r0, [pc, #104]	; (8001120 <MX_TIM3_Init+0xd8>)
 80010b6:	f001 ff7b 	bl	8002fb0 <HAL_TIM_ConfigClockSource>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80010c0:	f000 f8ac 	bl	800121c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80010c4:	4816      	ldr	r0, [pc, #88]	; (8001120 <MX_TIM3_Init+0xd8>)
 80010c6:	f001 fc4e 	bl	8002966 <HAL_TIM_IC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80010d0:	f000 f8a4 	bl	800121c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4619      	mov	r1, r3
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <MX_TIM3_Init+0xd8>)
 80010e4:	f002 fb22 	bl	800372c <HAL_TIMEx_MasterConfigSynchronization>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80010ee:	f000 f895 	bl	800121c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_TIM3_Init+0xd8>)
 800110a:	f001 feb5 	bl	8002e78 <HAL_TIM_IC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001114:	f000 f882 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000008c 	.word	0x2000008c
 8001124:	40000400 	.word	0x40000400

08001128 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <MX_USART3_UART_Init+0x50>)
 8001130:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 8001160:	f002 fb74 	bl	800384c <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800116a:	f000 f857 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000d4 	.word	0x200000d4
 8001178:	40004800 	.word	0x40004800

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_GPIO_Init+0x98>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <MX_GPIO_Init+0x98>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_GPIO_Init+0x98>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_GPIO_Init+0x98>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <MX_GPIO_Init+0x98>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_GPIO_Init+0x98>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_GPIO_Init+0x98>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <MX_GPIO_Init+0x98>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_GPIO_Init+0x98>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2120      	movs	r1, #32
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <MX_GPIO_Init+0x9c>)
 80011ec:	f000 fdf0 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011f0:	2320      	movs	r3, #32
 80011f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_GPIO_Init+0x9c>)
 8001208:	f000 fc4e 	bl	8001aa8 <HAL_GPIO_Init>

}
 800120c:	bf00      	nop
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000

0800121c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001224:	e7fe      	b.n	8001224 <Error_Handler+0x8>
	...

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <HAL_MspInit+0x4c>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_MspInit+0x4c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_MspInit+0x4c>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_TIM_Base_MspInit+0x94>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d133      	bne.n	8001302 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_TIM_Base_MspInit+0x98>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <HAL_TIM_Base_MspInit+0x98>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_TIM_Base_MspInit+0x98>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_TIM_Base_MspInit+0x98>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a14      	ldr	r2, [pc, #80]	; (8001310 <HAL_TIM_Base_MspInit+0x98>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_TIM_Base_MspInit+0x98>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012d2:	2340      	movs	r3, #64	; 0x40
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e2:	2302      	movs	r3, #2
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <HAL_TIM_Base_MspInit+0x9c>)
 80012ee:	f000 fbdb 	bl	8001aa8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	201d      	movs	r0, #29
 80012f8:	f000 fb0d 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012fc:	201d      	movs	r0, #29
 80012fe:	f000 fb26 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40000400 	.word	0x40000400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <HAL_UART_MspInit+0xd0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d152      	bne.n	80013e0 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_UART_MspInit+0xd4>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a2a      	ldr	r2, [pc, #168]	; (80013ec <HAL_UART_MspInit+0xd4>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <HAL_UART_MspInit+0xd4>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b24      	ldr	r3, [pc, #144]	; (80013ec <HAL_UART_MspInit+0xd4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a23      	ldr	r2, [pc, #140]	; (80013ec <HAL_UART_MspInit+0xd4>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <HAL_UART_MspInit+0xd4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_UART_MspInit+0xd4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <HAL_UART_MspInit+0xd4>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_UART_MspInit+0xd4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800138e:	2320      	movs	r3, #32
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800139e:	2307      	movs	r3, #7
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4811      	ldr	r0, [pc, #68]	; (80013f0 <HAL_UART_MspInit+0xd8>)
 80013aa:	f000 fb7d 	bl	8001aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013c0:	2307      	movs	r3, #7
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	480a      	ldr	r0, [pc, #40]	; (80013f4 <HAL_UART_MspInit+0xdc>)
 80013cc:	f000 fb6c 	bl	8001aa8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	2027      	movs	r0, #39	; 0x27
 80013d6:	f000 fa9e 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013da:	2027      	movs	r0, #39	; 0x27
 80013dc:	f000 fab7 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40004800 	.word	0x40004800
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020400 	.word	0x40020400

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 f948 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <TIM3_IRQHandler+0x10>)
 8001452:	f001 fc09 	bl	8002c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000008c 	.word	0x2000008c

08001460 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <USART3_IRQHandler+0x10>)
 8001466:	f002 fa3f 	bl	80038e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200000d4 	.word	0x200000d4

08001474 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e00a      	b.n	800149c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001486:	f3af 8000 	nop.w
 800148a:	4601      	mov	r1, r0
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	60ba      	str	r2, [r7, #8]
 8001492:	b2ca      	uxtb	r2, r1
 8001494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf0      	blt.n	8001486 <_read+0x12>
	}

return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	e009      	b.n	80014d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbf1      	blt.n	80014c0 <_write+0x12>
	}
	return len;
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_close>:

int _close(int file)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	return -1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150e:	605a      	str	r2, [r3, #4]
	return 0;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_isatty>:

int _isatty(int file)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
	return 1;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
	return 0;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f003 f878 	bl	8004674 <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20020000 	.word	0x20020000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	20000128 	.word	0x20000128
 80015b8:	20000140 	.word	0x20000140

080015bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <SystemInit+0x20>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <SystemInit+0x20>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001618 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015e6:	490e      	ldr	r1, [pc, #56]	; (8001620 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015fc:	4c0b      	ldr	r4, [pc, #44]	; (800162c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800160a:	f7ff ffd7 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f003 f837 	bl	8004680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7ff fc97 	bl	8000f44 <main>
  bx  lr    
 8001616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001624:	080056d4 	.word	0x080056d4
  ldr r2, =_sbss
 8001628:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800162c:	20000140 	.word	0x20000140

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <HAL_Init+0x40>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_Init+0x40>)
 800164a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_Init+0x40>)
 8001656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 f94f 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	200f      	movs	r0, #15
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff fdde 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023c00 	.word	0x40023c00

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f967 	bl	800196a <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 f92f 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000008 	.word	0x20000008
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008
 80016fc:	2000012c 	.word	0x2000012c

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000012c 	.word	0x2000012c

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	; (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff29 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff3e 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff8e 	bl	8001854 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff31 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff feb6 	bl	8001700 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d008      	beq.n	80019b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e052      	b.n	8001a5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0216 	bic.w	r2, r2, #22
 80019c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <HAL_DMA_Abort+0x62>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0208 	bic.w	r2, r2, #8
 80019f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a04:	e013      	b.n	8001a2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a06:	f7ff fe7b 	bl	8001700 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d90c      	bls.n	8001a2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e015      	b.n	8001a5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1e4      	bne.n	8001a06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	223f      	movs	r2, #63	; 0x3f
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d004      	beq.n	8001a80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2280      	movs	r2, #128	; 0x80
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e00c      	b.n	8001a9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2205      	movs	r2, #5
 8001a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e165      	b.n	8001d90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f040 8154 	bne.w	8001d8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d005      	beq.n	8001afa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d130      	bne.n	8001b5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 0201 	and.w	r2, r3, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d017      	beq.n	8001b98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d123      	bne.n	8001bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	08da      	lsrs	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3208      	adds	r2, #8
 8001bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	220f      	movs	r2, #15
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	08da      	lsrs	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3208      	adds	r2, #8
 8001be6:	69b9      	ldr	r1, [r7, #24]
 8001be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0203 	and.w	r2, r3, #3
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80ae 	beq.w	8001d8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <HAL_GPIO_Init+0x300>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a5c      	ldr	r2, [pc, #368]	; (8001da8 <HAL_GPIO_Init+0x300>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <HAL_GPIO_Init+0x300>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c4a:	4a58      	ldr	r2, [pc, #352]	; (8001dac <HAL_GPIO_Init+0x304>)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	3302      	adds	r3, #2
 8001c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4f      	ldr	r2, [pc, #316]	; (8001db0 <HAL_GPIO_Init+0x308>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d025      	beq.n	8001cc2 <HAL_GPIO_Init+0x21a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4e      	ldr	r2, [pc, #312]	; (8001db4 <HAL_GPIO_Init+0x30c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01f      	beq.n	8001cbe <HAL_GPIO_Init+0x216>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4d      	ldr	r2, [pc, #308]	; (8001db8 <HAL_GPIO_Init+0x310>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d019      	beq.n	8001cba <HAL_GPIO_Init+0x212>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4c      	ldr	r2, [pc, #304]	; (8001dbc <HAL_GPIO_Init+0x314>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x20e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4b      	ldr	r2, [pc, #300]	; (8001dc0 <HAL_GPIO_Init+0x318>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x20a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4a      	ldr	r2, [pc, #296]	; (8001dc4 <HAL_GPIO_Init+0x31c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x206>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a49      	ldr	r2, [pc, #292]	; (8001dc8 <HAL_GPIO_Init+0x320>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x202>
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	e00c      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001caa:	2307      	movs	r3, #7
 8001cac:	e00a      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001cae:	2305      	movs	r3, #5
 8001cb0:	e008      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e004      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	f002 0203 	and.w	r2, r2, #3
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	4093      	lsls	r3, r2
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd4:	4935      	ldr	r1, [pc, #212]	; (8001dac <HAL_GPIO_Init+0x304>)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce2:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <HAL_GPIO_Init+0x324>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d06:	4a31      	ldr	r2, [pc, #196]	; (8001dcc <HAL_GPIO_Init+0x324>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <HAL_GPIO_Init+0x324>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d30:	4a26      	ldr	r2, [pc, #152]	; (8001dcc <HAL_GPIO_Init+0x324>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d36:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <HAL_GPIO_Init+0x324>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_GPIO_Init+0x324>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_GPIO_Init+0x324>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d84:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <HAL_GPIO_Init+0x324>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b0f      	cmp	r3, #15
 8001d94:	f67f ae96 	bls.w	8001ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40013800 	.word	0x40013800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40020400 	.word	0x40020400
 8001db8:	40020800 	.word	0x40020800
 8001dbc:	40020c00 	.word	0x40020c00
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40021400 	.word	0x40021400
 8001dc8:	40021800 	.word	0x40021800
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de0:	787b      	ldrb	r3, [r7, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dec:	e003      	b.n	8001df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	041a      	lsls	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	619a      	str	r2, [r3, #24]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0cc      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d90c      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b65      	ldr	r3, [pc, #404]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b8      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e58:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a58      	ldr	r2, [pc, #352]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e70:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4a52      	ldr	r2, [pc, #328]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	494d      	ldr	r1, [pc, #308]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d044      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d119      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d003      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e06f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e067      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4934      	ldr	r1, [pc, #208]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef4:	f7ff fc04 	bl	8001700 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff fc00 	bl	8001700 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e04f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d20c      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e032      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4916      	ldr	r1, [pc, #88]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f8a:	f000 f855 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	490a      	ldr	r1, [pc, #40]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	5ccb      	ldrb	r3, [r1, r3]
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fb64 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023c00 	.word	0x40023c00
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08005614 	.word	0x08005614
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fec:	f7ff fff0 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	0a9b      	lsrs	r3, r3, #10
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4903      	ldr	r1, [pc, #12]	; (800200c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	08005624 	.word	0x08005624

08002010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002014:	f7ff ffdc 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	0b5b      	lsrs	r3, r3, #13
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	4903      	ldr	r1, [pc, #12]	; (8002034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	08005624 	.word	0x08005624

08002038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800203c:	b0a6      	sub	sp, #152	; 0x98
 800203e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800205e:	4bc8      	ldr	r3, [pc, #800]	; (8002380 <HAL_RCC_GetSysClockFreq+0x348>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b0c      	cmp	r3, #12
 8002068:	f200 817e 	bhi.w	8002368 <HAL_RCC_GetSysClockFreq+0x330>
 800206c:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <HAL_RCC_GetSysClockFreq+0x3c>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	080020a9 	.word	0x080020a9
 8002078:	08002369 	.word	0x08002369
 800207c:	08002369 	.word	0x08002369
 8002080:	08002369 	.word	0x08002369
 8002084:	080020b1 	.word	0x080020b1
 8002088:	08002369 	.word	0x08002369
 800208c:	08002369 	.word	0x08002369
 8002090:	08002369 	.word	0x08002369
 8002094:	080020b9 	.word	0x080020b9
 8002098:	08002369 	.word	0x08002369
 800209c:	08002369 	.word	0x08002369
 80020a0:	08002369 	.word	0x08002369
 80020a4:	08002223 	.word	0x08002223
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020a8:	4bb6      	ldr	r3, [pc, #728]	; (8002384 <HAL_RCC_GetSysClockFreq+0x34c>)
 80020aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80020ae:	e15f      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020b0:	4bb5      	ldr	r3, [pc, #724]	; (8002388 <HAL_RCC_GetSysClockFreq+0x350>)
 80020b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80020b6:	e15b      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b8:	4bb1      	ldr	r3, [pc, #708]	; (8002380 <HAL_RCC_GetSysClockFreq+0x348>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c4:	4bae      	ldr	r3, [pc, #696]	; (8002380 <HAL_RCC_GetSysClockFreq+0x348>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d031      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d0:	4bab      	ldr	r3, [pc, #684]	; (8002380 <HAL_RCC_GetSysClockFreq+0x348>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	2200      	movs	r2, #0
 80020d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80020da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e2:	663b      	str	r3, [r7, #96]	; 0x60
 80020e4:	2300      	movs	r3, #0
 80020e6:	667b      	str	r3, [r7, #100]	; 0x64
 80020e8:	4ba7      	ldr	r3, [pc, #668]	; (8002388 <HAL_RCC_GetSysClockFreq+0x350>)
 80020ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80020ee:	462a      	mov	r2, r5
 80020f0:	fb03 f202 	mul.w	r2, r3, r2
 80020f4:	2300      	movs	r3, #0
 80020f6:	4621      	mov	r1, r4
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	4aa2      	ldr	r2, [pc, #648]	; (8002388 <HAL_RCC_GetSysClockFreq+0x350>)
 8002100:	4621      	mov	r1, r4
 8002102:	fba1 1202 	umull	r1, r2, r1, r2
 8002106:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002108:	460a      	mov	r2, r1
 800210a:	67ba      	str	r2, [r7, #120]	; 0x78
 800210c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800210e:	4413      	add	r3, r2
 8002110:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002116:	2200      	movs	r2, #0
 8002118:	65bb      	str	r3, [r7, #88]	; 0x58
 800211a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800211c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002120:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002124:	f7fe fcb2 	bl	8000a8c <__aeabi_uldivmod>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4613      	mov	r3, r2
 800212e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002132:	e064      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002134:	4b92      	ldr	r3, [pc, #584]	; (8002380 <HAL_RCC_GetSysClockFreq+0x348>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	2200      	movs	r2, #0
 800213c:	653b      	str	r3, [r7, #80]	; 0x50
 800213e:	657a      	str	r2, [r7, #84]	; 0x54
 8002140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002146:	64bb      	str	r3, [r7, #72]	; 0x48
 8002148:	2300      	movs	r3, #0
 800214a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800214c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002150:	4622      	mov	r2, r4
 8002152:	462b      	mov	r3, r5
 8002154:	f04f 0000 	mov.w	r0, #0
 8002158:	f04f 0100 	mov.w	r1, #0
 800215c:	0159      	lsls	r1, r3, #5
 800215e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002162:	0150      	lsls	r0, r2, #5
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4621      	mov	r1, r4
 800216a:	1a51      	subs	r1, r2, r1
 800216c:	6139      	str	r1, [r7, #16]
 800216e:	4629      	mov	r1, r5
 8002170:	eb63 0301 	sbc.w	r3, r3, r1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002182:	4659      	mov	r1, fp
 8002184:	018b      	lsls	r3, r1, #6
 8002186:	4651      	mov	r1, sl
 8002188:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800218c:	4651      	mov	r1, sl
 800218e:	018a      	lsls	r2, r1, #6
 8002190:	4651      	mov	r1, sl
 8002192:	ebb2 0801 	subs.w	r8, r2, r1
 8002196:	4659      	mov	r1, fp
 8002198:	eb63 0901 	sbc.w	r9, r3, r1
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021b0:	4690      	mov	r8, r2
 80021b2:	4699      	mov	r9, r3
 80021b4:	4623      	mov	r3, r4
 80021b6:	eb18 0303 	adds.w	r3, r8, r3
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	462b      	mov	r3, r5
 80021be:	eb49 0303 	adc.w	r3, r9, r3
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021d0:	4629      	mov	r1, r5
 80021d2:	028b      	lsls	r3, r1, #10
 80021d4:	4621      	mov	r1, r4
 80021d6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021da:	4621      	mov	r1, r4
 80021dc:	028a      	lsls	r2, r1, #10
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e6:	2200      	movs	r2, #0
 80021e8:	643b      	str	r3, [r7, #64]	; 0x40
 80021ea:	647a      	str	r2, [r7, #68]	; 0x44
 80021ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021f0:	f7fe fc4c 	bl	8000a8c <__aeabi_uldivmod>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4613      	mov	r3, r2
 80021fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021fe:	4b60      	ldr	r3, [pc, #384]	; (8002380 <HAL_RCC_GetSysClockFreq+0x348>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	0c1b      	lsrs	r3, r3, #16
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	3301      	adds	r3, #1
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002210:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002220:	e0a6      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002222:	4b57      	ldr	r3, [pc, #348]	; (8002380 <HAL_RCC_GetSysClockFreq+0x348>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800222a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800222e:	4b54      	ldr	r3, [pc, #336]	; (8002380 <HAL_RCC_GetSysClockFreq+0x348>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d02a      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223a:	4b51      	ldr	r3, [pc, #324]	; (8002380 <HAL_RCC_GetSysClockFreq+0x348>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	099b      	lsrs	r3, r3, #6
 8002240:	2200      	movs	r2, #0
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
 8002244:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002248:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800224c:	2100      	movs	r1, #0
 800224e:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <HAL_RCC_GetSysClockFreq+0x350>)
 8002250:	fb03 f201 	mul.w	r2, r3, r1
 8002254:	2300      	movs	r3, #0
 8002256:	fb00 f303 	mul.w	r3, r0, r3
 800225a:	4413      	add	r3, r2
 800225c:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <HAL_RCC_GetSysClockFreq+0x350>)
 800225e:	fba0 1202 	umull	r1, r2, r0, r2
 8002262:	677a      	str	r2, [r7, #116]	; 0x74
 8002264:	460a      	mov	r2, r1
 8002266:	673a      	str	r2, [r7, #112]	; 0x70
 8002268:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800226a:	4413      	add	r3, r2
 800226c:	677b      	str	r3, [r7, #116]	; 0x74
 800226e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002272:	2200      	movs	r2, #0
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
 8002276:	637a      	str	r2, [r7, #52]	; 0x34
 8002278:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800227c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002280:	f7fe fc04 	bl	8000a8c <__aeabi_uldivmod>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4613      	mov	r3, r2
 800228a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800228e:	e05b      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002290:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <HAL_RCC_GetSysClockFreq+0x348>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	2200      	movs	r2, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
 800229a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a2:	623b      	str	r3, [r7, #32]
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022ac:	4642      	mov	r2, r8
 80022ae:	464b      	mov	r3, r9
 80022b0:	f04f 0000 	mov.w	r0, #0
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	0159      	lsls	r1, r3, #5
 80022ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022be:	0150      	lsls	r0, r2, #5
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4641      	mov	r1, r8
 80022c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80022ca:	4649      	mov	r1, r9
 80022cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022e4:	ebb2 040a 	subs.w	r4, r2, sl
 80022e8:	eb63 050b 	sbc.w	r5, r3, fp
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	00eb      	lsls	r3, r5, #3
 80022f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022fa:	00e2      	lsls	r2, r4, #3
 80022fc:	4614      	mov	r4, r2
 80022fe:	461d      	mov	r5, r3
 8002300:	4643      	mov	r3, r8
 8002302:	18e3      	adds	r3, r4, r3
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	464b      	mov	r3, r9
 8002308:	eb45 0303 	adc.w	r3, r5, r3
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	e9d7 4500 	ldrd	r4, r5, [r7]
 800231a:	4629      	mov	r1, r5
 800231c:	028b      	lsls	r3, r1, #10
 800231e:	4621      	mov	r1, r4
 8002320:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002324:	4621      	mov	r1, r4
 8002326:	028a      	lsls	r2, r1, #10
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002330:	2200      	movs	r2, #0
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	61fa      	str	r2, [r7, #28]
 8002336:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800233a:	f7fe fba7 	bl	8000a8c <__aeabi_uldivmod>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4613      	mov	r3, r2
 8002344:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_RCC_GetSysClockFreq+0x348>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	0f1b      	lsrs	r3, r3, #28
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800235a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002366:	e003      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_RCC_GetSysClockFreq+0x34c>)
 800236a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800236e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002374:	4618      	mov	r0, r3
 8002376:	3798      	adds	r7, #152	; 0x98
 8002378:	46bd      	mov	sp, r7
 800237a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	00f42400 	.word	0x00f42400
 8002388:	017d7840 	.word	0x017d7840

0800238c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e28d      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8083 	beq.w	80024b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023ac:	4b94      	ldr	r3, [pc, #592]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d019      	beq.n	80023ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023b8:	4b91      	ldr	r3, [pc, #580]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023c4:	4b8e      	ldr	r3, [pc, #568]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d0:	d00c      	beq.n	80023ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d2:	4b8b      	ldr	r3, [pc, #556]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d112      	bne.n	8002404 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023de:	4b88      	ldr	r3, [pc, #544]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ea:	d10b      	bne.n	8002404 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	4b84      	ldr	r3, [pc, #528]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d05b      	beq.n	80024b0 <HAL_RCC_OscConfig+0x124>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d157      	bne.n	80024b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e25a      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240c:	d106      	bne.n	800241c <HAL_RCC_OscConfig+0x90>
 800240e:	4b7c      	ldr	r3, [pc, #496]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a7b      	ldr	r2, [pc, #492]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e01d      	b.n	8002458 <HAL_RCC_OscConfig+0xcc>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0xb4>
 8002426:	4b76      	ldr	r3, [pc, #472]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a75      	ldr	r2, [pc, #468]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 800242c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b73      	ldr	r3, [pc, #460]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a72      	ldr	r2, [pc, #456]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0xcc>
 8002440:	4b6f      	ldr	r3, [pc, #444]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a6e      	ldr	r2, [pc, #440]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b6c      	ldr	r3, [pc, #432]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a6b      	ldr	r2, [pc, #428]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d013      	beq.n	8002488 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7ff f94e 	bl	8001700 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002468:	f7ff f94a 	bl	8001700 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e21f      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b61      	ldr	r3, [pc, #388]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0xdc>
 8002486:	e014      	b.n	80024b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7ff f93a 	bl	8001700 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff f936 	bl	8001700 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e20b      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a2:	4b57      	ldr	r3, [pc, #348]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x104>
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d06f      	beq.n	800259e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024be:	4b50      	ldr	r3, [pc, #320]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d017      	beq.n	80024fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ca:	4b4d      	ldr	r3, [pc, #308]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d105      	bne.n	80024e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024d6:	4b4a      	ldr	r3, [pc, #296]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e2:	4b47      	ldr	r3, [pc, #284]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d11c      	bne.n	8002528 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ee:	4b44      	ldr	r3, [pc, #272]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d116      	bne.n	8002528 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	4b41      	ldr	r3, [pc, #260]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x186>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1d3      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4937      	ldr	r1, [pc, #220]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	e03a      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002530:	4b34      	ldr	r3, [pc, #208]	; (8002604 <HAL_RCC_OscConfig+0x278>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7ff f8e3 	bl	8001700 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253e:	f7ff f8df 	bl	8001700 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e1b4      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255c:	4b28      	ldr	r3, [pc, #160]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4925      	ldr	r1, [pc, #148]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e015      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002572:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_RCC_OscConfig+0x278>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7ff f8c2 	bl	8001700 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002580:	f7ff f8be 	bl	8001700 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e193      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d036      	beq.n	8002618 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d016      	beq.n	80025e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_RCC_OscConfig+0x27c>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7ff f8a2 	bl	8001700 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c0:	f7ff f89e 	bl	8001700 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e173      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80025d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x234>
 80025de:	e01b      	b.n	8002618 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_OscConfig+0x27c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e6:	f7ff f88b 	bl	8001700 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	e00e      	b.n	800260c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ee:	f7ff f887 	bl	8001700 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d907      	bls.n	800260c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e15c      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
 8002600:	40023800 	.word	0x40023800
 8002604:	42470000 	.word	0x42470000
 8002608:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	4b8a      	ldr	r3, [pc, #552]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800260e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ea      	bne.n	80025ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8097 	beq.w	8002754 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262a:	4b83      	ldr	r3, [pc, #524]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10f      	bne.n	8002656 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	4b7f      	ldr	r3, [pc, #508]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a7e      	ldr	r2, [pc, #504]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b7c      	ldr	r3, [pc, #496]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002652:	2301      	movs	r3, #1
 8002654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002656:	4b79      	ldr	r3, [pc, #484]	; (800283c <HAL_RCC_OscConfig+0x4b0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d118      	bne.n	8002694 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002662:	4b76      	ldr	r3, [pc, #472]	; (800283c <HAL_RCC_OscConfig+0x4b0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a75      	ldr	r2, [pc, #468]	; (800283c <HAL_RCC_OscConfig+0x4b0>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266e:	f7ff f847 	bl	8001700 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002676:	f7ff f843 	bl	8001700 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e118      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	4b6c      	ldr	r3, [pc, #432]	; (800283c <HAL_RCC_OscConfig+0x4b0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x31e>
 800269c:	4b66      	ldr	r3, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
 80026a8:	e01c      	b.n	80026e4 <HAL_RCC_OscConfig+0x358>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b05      	cmp	r3, #5
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x340>
 80026b2:	4b61      	ldr	r3, [pc, #388]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	4a60      	ldr	r2, [pc, #384]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026b8:	f043 0304 	orr.w	r3, r3, #4
 80026bc:	6713      	str	r3, [r2, #112]	; 0x70
 80026be:	4b5e      	ldr	r3, [pc, #376]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	4a5d      	ldr	r2, [pc, #372]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ca:	e00b      	b.n	80026e4 <HAL_RCC_OscConfig+0x358>
 80026cc:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	4a59      	ldr	r2, [pc, #356]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	6713      	str	r3, [r2, #112]	; 0x70
 80026d8:	4b57      	ldr	r3, [pc, #348]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	4a56      	ldr	r2, [pc, #344]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026de:	f023 0304 	bic.w	r3, r3, #4
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d015      	beq.n	8002718 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7ff f808 	bl	8001700 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f2:	e00a      	b.n	800270a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f4:	f7ff f804 	bl	8001700 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e0d7      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270a:	4b4b      	ldr	r3, [pc, #300]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0ee      	beq.n	80026f4 <HAL_RCC_OscConfig+0x368>
 8002716:	e014      	b.n	8002742 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7fe fff2 	bl	8001700 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271e:	e00a      	b.n	8002736 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002720:	f7fe ffee 	bl	8001700 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e0c1      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002736:	4b40      	ldr	r3, [pc, #256]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ee      	bne.n	8002720 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002752:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80ad 	beq.w	80028b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800275e:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b08      	cmp	r3, #8
 8002768:	d060      	beq.n	800282c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d145      	bne.n	80027fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b33      	ldr	r3, [pc, #204]	; (8002840 <HAL_RCC_OscConfig+0x4b4>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe ffc2 	bl	8001700 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe ffbe 	bl	8001700 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e093      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b29      	ldr	r3, [pc, #164]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	019b      	lsls	r3, r3, #6
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	085b      	lsrs	r3, r3, #1
 80027b6:	3b01      	subs	r3, #1
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	071b      	lsls	r3, r3, #28
 80027ca:	491b      	ldr	r1, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x4b4>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe ff93 	bl	8001700 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe ff8f 	bl	8001700 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e064      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x452>
 80027fc:	e05c      	b.n	80028b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_RCC_OscConfig+0x4b4>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe ff7c 	bl	8001700 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe ff78 	bl	8001700 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e04d      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x480>
 800282a:	e045      	b.n	80028b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d107      	bne.n	8002844 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e040      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
 8002838:	40023800 	.word	0x40023800
 800283c:	40007000 	.word	0x40007000
 8002840:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_RCC_OscConfig+0x538>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d030      	beq.n	80028b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d129      	bne.n	80028b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d122      	bne.n	80028b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002874:	4013      	ands	r3, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800287a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800287c:	4293      	cmp	r3, r2
 800287e:	d119      	bne.n	80028b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	3b01      	subs	r3, #1
 800288e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d10f      	bne.n	80028b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e041      	b.n	800295e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fcc2 	bl	8001278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f000 fc86 	bl	8003218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e041      	b.n	80029fc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f839 	bl	8002a04 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3304      	adds	r3, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	4610      	mov	r0, r2
 80029a6:	f000 fc37 	bl	8003218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <HAL_TIM_IC_Start_IT+0x1e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	e013      	b.n	8002a5e <HAL_TIM_IC_Start_IT+0x46>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d104      	bne.n	8002a46 <HAL_TIM_IC_Start_IT+0x2e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	e00b      	b.n	8002a5e <HAL_TIM_IC_Start_IT+0x46>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_IC_Start_IT+0x3e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	e003      	b.n	8002a5e <HAL_TIM_IC_Start_IT+0x46>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d104      	bne.n	8002a70 <HAL_TIM_IC_Start_IT+0x58>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e013      	b.n	8002a98 <HAL_TIM_IC_Start_IT+0x80>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d104      	bne.n	8002a80 <HAL_TIM_IC_Start_IT+0x68>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	e00b      	b.n	8002a98 <HAL_TIM_IC_Start_IT+0x80>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d104      	bne.n	8002a90 <HAL_TIM_IC_Start_IT+0x78>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e003      	b.n	8002a98 <HAL_TIM_IC_Start_IT+0x80>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a9a:	7bbb      	ldrb	r3, [r7, #14]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d102      	bne.n	8002aa6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002aa0:	7b7b      	ldrb	r3, [r7, #13]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d001      	beq.n	8002aaa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e0cc      	b.n	8002c44 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_IC_Start_IT+0xa2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab8:	e013      	b.n	8002ae2 <HAL_TIM_IC_Start_IT+0xca>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d104      	bne.n	8002aca <HAL_TIM_IC_Start_IT+0xb2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac8:	e00b      	b.n	8002ae2 <HAL_TIM_IC_Start_IT+0xca>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d104      	bne.n	8002ada <HAL_TIM_IC_Start_IT+0xc2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad8:	e003      	b.n	8002ae2 <HAL_TIM_IC_Start_IT+0xca>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <HAL_TIM_IC_Start_IT+0xda>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002af0:	e013      	b.n	8002b1a <HAL_TIM_IC_Start_IT+0x102>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d104      	bne.n	8002b02 <HAL_TIM_IC_Start_IT+0xea>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b00:	e00b      	b.n	8002b1a <HAL_TIM_IC_Start_IT+0x102>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d104      	bne.n	8002b12 <HAL_TIM_IC_Start_IT+0xfa>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b10:	e003      	b.n	8002b1a <HAL_TIM_IC_Start_IT+0x102>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b0c      	cmp	r3, #12
 8002b1e:	d841      	bhi.n	8002ba4 <HAL_TIM_IC_Start_IT+0x18c>
 8002b20:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <HAL_TIM_IC_Start_IT+0x110>)
 8002b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b26:	bf00      	nop
 8002b28:	08002b5d 	.word	0x08002b5d
 8002b2c:	08002ba5 	.word	0x08002ba5
 8002b30:	08002ba5 	.word	0x08002ba5
 8002b34:	08002ba5 	.word	0x08002ba5
 8002b38:	08002b6f 	.word	0x08002b6f
 8002b3c:	08002ba5 	.word	0x08002ba5
 8002b40:	08002ba5 	.word	0x08002ba5
 8002b44:	08002ba5 	.word	0x08002ba5
 8002b48:	08002b81 	.word	0x08002b81
 8002b4c:	08002ba5 	.word	0x08002ba5
 8002b50:	08002ba5 	.word	0x08002ba5
 8002b54:	08002ba5 	.word	0x08002ba5
 8002b58:	08002b93 	.word	0x08002b93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0202 	orr.w	r2, r2, #2
 8002b6a:	60da      	str	r2, [r3, #12]
      break;
 8002b6c:	e01d      	b.n	8002baa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0204 	orr.w	r2, r2, #4
 8002b7c:	60da      	str	r2, [r3, #12]
      break;
 8002b7e:	e014      	b.n	8002baa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0208 	orr.w	r2, r2, #8
 8002b8e:	60da      	str	r2, [r3, #12]
      break;
 8002b90:	e00b      	b.n	8002baa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0210 	orr.w	r2, r2, #16
 8002ba0:	60da      	str	r2, [r3, #12]
      break;
 8002ba2:	e002      	b.n	8002baa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d148      	bne.n	8002c42 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	6839      	ldr	r1, [r7, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fd91 	bl	80036e0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <HAL_TIM_IC_Start_IT+0x234>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_TIM_IC_Start_IT+0x1f6>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd0:	d01d      	beq.n	8002c0e <HAL_TIM_IC_Start_IT+0x1f6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <HAL_TIM_IC_Start_IT+0x238>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d018      	beq.n	8002c0e <HAL_TIM_IC_Start_IT+0x1f6>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1c      	ldr	r2, [pc, #112]	; (8002c54 <HAL_TIM_IC_Start_IT+0x23c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_TIM_IC_Start_IT+0x1f6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <HAL_TIM_IC_Start_IT+0x240>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_TIM_IC_Start_IT+0x1f6>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <HAL_TIM_IC_Start_IT+0x244>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_TIM_IC_Start_IT+0x1f6>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <HAL_TIM_IC_Start_IT+0x248>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_TIM_IC_Start_IT+0x1f6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <HAL_TIM_IC_Start_IT+0x24c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d111      	bne.n	8002c32 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	d010      	beq.n	8002c42 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	e007      	b.n	8002c42 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800
 8002c58:	40000c00 	.word	0x40000c00
 8002c5c:	40010400 	.word	0x40010400
 8002c60:	40014000 	.word	0x40014000
 8002c64:	40001800 	.word	0x40001800

08002c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d122      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0202 	mvn.w	r2, #2
 8002c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe f88c 	bl	8000dc8 <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fa92 	bl	80031dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fa99 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d122      	bne.n	8002d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d11b      	bne.n	8002d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0204 	mvn.w	r2, #4
 8002ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe f862 	bl	8000dc8 <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fa68 	bl	80031dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fa6f 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d122      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d11b      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0208 	mvn.w	r2, #8
 8002d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2204      	movs	r2, #4
 8002d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe f838 	bl	8000dc8 <HAL_TIM_IC_CaptureCallback>
 8002d58:	e005      	b.n	8002d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fa3e 	bl	80031dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fa45 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d122      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d11b      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0210 	mvn.w	r2, #16
 8002d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2208      	movs	r2, #8
 8002d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fe f80e 	bl	8000dc8 <HAL_TIM_IC_CaptureCallback>
 8002dac:	e005      	b.n	8002dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fa14 	bl	80031dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fa1b 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0201 	mvn.w	r2, #1
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f9ee 	bl	80031c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	2b80      	cmp	r3, #128	; 0x80
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fd10 	bl	8003838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9e0 	bl	8003204 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0220 	mvn.w	r2, #32
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fcda 	bl	8003824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e088      	b.n	8002fa8 <HAL_TIM_IC_ConfigChannel+0x130>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d11b      	bne.n	8002edc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	6819      	ldr	r1, [r3, #0]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f000 fa50 	bl	8003358 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 020c 	bic.w	r2, r2, #12
 8002ec6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6999      	ldr	r1, [r3, #24]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	619a      	str	r2, [r3, #24]
 8002eda:	e060      	b.n	8002f9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d11c      	bne.n	8002f1c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6819      	ldr	r1, [r3, #0]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f000 fad4 	bl	800349e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f04:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6999      	ldr	r1, [r3, #24]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	619a      	str	r2, [r3, #24]
 8002f1a:	e040      	b.n	8002f9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d11b      	bne.n	8002f5a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f000 fb21 	bl	8003578 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 020c 	bic.w	r2, r2, #12
 8002f44:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69d9      	ldr	r1, [r3, #28]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	61da      	str	r2, [r3, #28]
 8002f58:	e021      	b.n	8002f9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d11c      	bne.n	8002f9a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f000 fb3e 	bl	80035f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f82:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69d9      	ldr	r1, [r3, #28]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	021a      	lsls	r2, r3, #8
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	61da      	str	r2, [r3, #28]
 8002f98:	e001      	b.n	8002f9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_TIM_ConfigClockSource+0x1c>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e0b4      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x186>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003004:	d03e      	beq.n	8003084 <HAL_TIM_ConfigClockSource+0xd4>
 8003006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300a:	f200 8087 	bhi.w	800311c <HAL_TIM_ConfigClockSource+0x16c>
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003012:	f000 8086 	beq.w	8003122 <HAL_TIM_ConfigClockSource+0x172>
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	d87f      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 800301c:	2b70      	cmp	r3, #112	; 0x70
 800301e:	d01a      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0xa6>
 8003020:	2b70      	cmp	r3, #112	; 0x70
 8003022:	d87b      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 8003024:	2b60      	cmp	r3, #96	; 0x60
 8003026:	d050      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x11a>
 8003028:	2b60      	cmp	r3, #96	; 0x60
 800302a:	d877      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 800302c:	2b50      	cmp	r3, #80	; 0x50
 800302e:	d03c      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0xfa>
 8003030:	2b50      	cmp	r3, #80	; 0x50
 8003032:	d873      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d058      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x13a>
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d86f      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 800303c:	2b30      	cmp	r3, #48	; 0x30
 800303e:	d064      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x15a>
 8003040:	2b30      	cmp	r3, #48	; 0x30
 8003042:	d86b      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d060      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x15a>
 8003048:	2b20      	cmp	r3, #32
 800304a:	d867      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05c      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x15a>
 8003050:	2b10      	cmp	r3, #16
 8003052:	d05a      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x15a>
 8003054:	e062      	b.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f000 fb1b 	bl	80036a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	609a      	str	r2, [r3, #8]
      break;
 8003082:	e04f      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	6899      	ldr	r1, [r3, #8]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f000 fb04 	bl	80036a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a6:	609a      	str	r2, [r3, #8]
      break;
 80030a8:	e03c      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f000 f9c2 	bl	8003440 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2150      	movs	r1, #80	; 0x50
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fad1 	bl	800366a <TIM_ITRx_SetConfig>
      break;
 80030c8:	e02c      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f000 fa1e 	bl	8003518 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2160      	movs	r1, #96	; 0x60
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fac1 	bl	800366a <TIM_ITRx_SetConfig>
      break;
 80030e8:	e01c      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 f9a2 	bl	8003440 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2140      	movs	r1, #64	; 0x40
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fab1 	bl	800366a <TIM_ITRx_SetConfig>
      break;
 8003108:	e00c      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	4610      	mov	r0, r2
 8003116:	f000 faa8 	bl	800366a <TIM_ITRx_SetConfig>
      break;
 800311a:	e003      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      break;
 8003120:	e000      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	d831      	bhi.n	80031b8 <HAL_TIM_ReadCapturedValue+0x78>
 8003154:	a201      	add	r2, pc, #4	; (adr r2, 800315c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315a:	bf00      	nop
 800315c:	08003191 	.word	0x08003191
 8003160:	080031b9 	.word	0x080031b9
 8003164:	080031b9 	.word	0x080031b9
 8003168:	080031b9 	.word	0x080031b9
 800316c:	0800319b 	.word	0x0800319b
 8003170:	080031b9 	.word	0x080031b9
 8003174:	080031b9 	.word	0x080031b9
 8003178:	080031b9 	.word	0x080031b9
 800317c:	080031a5 	.word	0x080031a5
 8003180:	080031b9 	.word	0x080031b9
 8003184:	080031b9 	.word	0x080031b9
 8003188:	080031b9 	.word	0x080031b9
 800318c:	080031af 	.word	0x080031af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	60fb      	str	r3, [r7, #12]

      break;
 8003198:	e00f      	b.n	80031ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	60fb      	str	r3, [r7, #12]

      break;
 80031a2:	e00a      	b.n	80031ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	60fb      	str	r3, [r7, #12]

      break;
 80031ac:	e005      	b.n	80031ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	60fb      	str	r3, [r7, #12]

      break;
 80031b6:	e000      	b.n	80031ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80031b8:	bf00      	nop
  }

  return tmpreg;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a40      	ldr	r2, [pc, #256]	; (800332c <TIM_Base_SetConfig+0x114>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d013      	beq.n	8003258 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003236:	d00f      	beq.n	8003258 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a3d      	ldr	r2, [pc, #244]	; (8003330 <TIM_Base_SetConfig+0x118>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00b      	beq.n	8003258 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3c      	ldr	r2, [pc, #240]	; (8003334 <TIM_Base_SetConfig+0x11c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d007      	beq.n	8003258 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a3b      	ldr	r2, [pc, #236]	; (8003338 <TIM_Base_SetConfig+0x120>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d003      	beq.n	8003258 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3a      	ldr	r2, [pc, #232]	; (800333c <TIM_Base_SetConfig+0x124>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d108      	bne.n	800326a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a2f      	ldr	r2, [pc, #188]	; (800332c <TIM_Base_SetConfig+0x114>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d02b      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003278:	d027      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2c      	ldr	r2, [pc, #176]	; (8003330 <TIM_Base_SetConfig+0x118>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d023      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a2b      	ldr	r2, [pc, #172]	; (8003334 <TIM_Base_SetConfig+0x11c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01f      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2a      	ldr	r2, [pc, #168]	; (8003338 <TIM_Base_SetConfig+0x120>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01b      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a29      	ldr	r2, [pc, #164]	; (800333c <TIM_Base_SetConfig+0x124>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d017      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a28      	ldr	r2, [pc, #160]	; (8003340 <TIM_Base_SetConfig+0x128>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a27      	ldr	r2, [pc, #156]	; (8003344 <TIM_Base_SetConfig+0x12c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00f      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <TIM_Base_SetConfig+0x130>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00b      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a25      	ldr	r2, [pc, #148]	; (800334c <TIM_Base_SetConfig+0x134>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a24      	ldr	r2, [pc, #144]	; (8003350 <TIM_Base_SetConfig+0x138>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a23      	ldr	r2, [pc, #140]	; (8003354 <TIM_Base_SetConfig+0x13c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d108      	bne.n	80032dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a0a      	ldr	r2, [pc, #40]	; (800332c <TIM_Base_SetConfig+0x114>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_Base_SetConfig+0xf8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a0c      	ldr	r2, [pc, #48]	; (800333c <TIM_Base_SetConfig+0x124>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d103      	bne.n	8003318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	615a      	str	r2, [r3, #20]
}
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40010000 	.word	0x40010000
 8003330:	40000400 	.word	0x40000400
 8003334:	40000800 	.word	0x40000800
 8003338:	40000c00 	.word	0x40000c00
 800333c:	40010400 	.word	0x40010400
 8003340:	40014000 	.word	0x40014000
 8003344:	40014400 	.word	0x40014400
 8003348:	40014800 	.word	0x40014800
 800334c:	40001800 	.word	0x40001800
 8003350:	40001c00 	.word	0x40001c00
 8003354:	40002000 	.word	0x40002000

08003358 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0201 	bic.w	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4a28      	ldr	r2, [pc, #160]	; (8003424 <TIM_TI1_SetConfig+0xcc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01b      	beq.n	80033be <TIM_TI1_SetConfig+0x66>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338c:	d017      	beq.n	80033be <TIM_TI1_SetConfig+0x66>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a25      	ldr	r2, [pc, #148]	; (8003428 <TIM_TI1_SetConfig+0xd0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <TIM_TI1_SetConfig+0x66>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4a24      	ldr	r2, [pc, #144]	; (800342c <TIM_TI1_SetConfig+0xd4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00f      	beq.n	80033be <TIM_TI1_SetConfig+0x66>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a23      	ldr	r2, [pc, #140]	; (8003430 <TIM_TI1_SetConfig+0xd8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00b      	beq.n	80033be <TIM_TI1_SetConfig+0x66>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4a22      	ldr	r2, [pc, #136]	; (8003434 <TIM_TI1_SetConfig+0xdc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d007      	beq.n	80033be <TIM_TI1_SetConfig+0x66>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a21      	ldr	r2, [pc, #132]	; (8003438 <TIM_TI1_SetConfig+0xe0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d003      	beq.n	80033be <TIM_TI1_SetConfig+0x66>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4a20      	ldr	r2, [pc, #128]	; (800343c <TIM_TI1_SetConfig+0xe4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d101      	bne.n	80033c2 <TIM_TI1_SetConfig+0x6a>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <TIM_TI1_SetConfig+0x6c>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0303 	bic.w	r3, r3, #3
 80033ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e003      	b.n	80033e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f023 030a 	bic.w	r3, r3, #10
 80033fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f003 030a 	and.w	r3, r3, #10
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	621a      	str	r2, [r3, #32]
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40010000 	.word	0x40010000
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800
 8003430:	40000c00 	.word	0x40000c00
 8003434:	40010400 	.word	0x40010400
 8003438:	40014000 	.word	0x40014000
 800343c:	40001800 	.word	0x40001800

08003440 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f023 0201 	bic.w	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800346a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f023 030a 	bic.w	r3, r3, #10
 800347c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800349e:	b480      	push	{r7}
 80034a0:	b087      	sub	sp, #28
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f023 0210 	bic.w	r2, r3, #16
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	031b      	lsls	r3, r3, #12
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	621a      	str	r2, [r3, #32]
}
 800350c:	bf00      	nop
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f023 0210 	bic.w	r2, r3, #16
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003542:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	031b      	lsls	r3, r3, #12
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003554:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	621a      	str	r2, [r3, #32]
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 0303 	bic.w	r3, r3, #3
 80035a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80035c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	621a      	str	r2, [r3, #32]
}
 80035e4:	bf00      	nop
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800362e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	031b      	lsls	r3, r3, #12
 8003634:	b29b      	uxth	r3, r3
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003642:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	031b      	lsls	r3, r3, #12
 8003648:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	621a      	str	r2, [r3, #32]
}
 800365e:	bf00      	nop
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800366a:	b480      	push	{r7}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	f043 0307 	orr.w	r3, r3, #7
 800368c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	021a      	lsls	r2, r3, #8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	609a      	str	r2, [r3, #8]
}
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2201      	movs	r2, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1a      	ldr	r2, [r3, #32]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	43db      	mvns	r3, r3
 8003702:	401a      	ands	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a1a      	ldr	r2, [r3, #32]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003740:	2302      	movs	r3, #2
 8003742:	e05a      	b.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a21      	ldr	r2, [pc, #132]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d022      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d01d      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1d      	ldr	r2, [pc, #116]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d018      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1a      	ldr	r2, [pc, #104]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00e      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d009      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a17      	ldr	r2, [pc, #92]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d004      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a15      	ldr	r2, [pc, #84]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d10c      	bne.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800
 8003814:	40000c00 	.word	0x40000c00
 8003818:	40010400 	.word	0x40010400
 800381c:	40014000 	.word	0x40014000
 8003820:	40001800 	.word	0x40001800

08003824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e03f      	b.n	80038de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd fd50 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2224      	movs	r2, #36	; 0x24
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800388e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fc7b 	bl	800418c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b0ba      	sub	sp, #232	; 0xe8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800391a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10f      	bne.n	800394e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800392e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_UART_IRQHandler+0x66>
 800393a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fb65 	bl	8004016 <UART_Receive_IT>
      return;
 800394c:	e256      	b.n	8003dfc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800394e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 80de 	beq.w	8003b14 <HAL_UART_IRQHandler+0x22c>
 8003958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003968:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80d1 	beq.w	8003b14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_UART_IRQHandler+0xae>
 800397e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f043 0201 	orr.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_UART_IRQHandler+0xd2>
 80039a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f043 0202 	orr.w	r2, r3, #2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_UART_IRQHandler+0xf6>
 80039c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f043 0204 	orr.w	r2, r3, #4
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d011      	beq.n	8003a0e <HAL_UART_IRQHandler+0x126>
 80039ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f043 0208 	orr.w	r2, r3, #8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 81ed 	beq.w	8003df2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_UART_IRQHandler+0x14e>
 8003a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 faf0 	bl	8004016 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <HAL_UART_IRQHandler+0x17a>
 8003a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d04f      	beq.n	8003b02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9f8 	bl	8003e58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d141      	bne.n	8003afa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3314      	adds	r3, #20
 8003a9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003aa2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1d9      	bne.n	8003a76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d013      	beq.n	8003af2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	4a7d      	ldr	r2, [pc, #500]	; (8003cc4 <HAL_UART_IRQHandler+0x3dc>)
 8003ad0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd ffc3 	bl	8001a62 <HAL_DMA_Abort_IT>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aec:	4610      	mov	r0, r2
 8003aee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af0:	e00e      	b.n	8003b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f99a 	bl	8003e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af8:	e00a      	b.n	8003b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f996 	bl	8003e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	e006      	b.n	8003b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f992 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b0e:	e170      	b.n	8003df2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b10:	bf00      	nop
    return;
 8003b12:	e16e      	b.n	8003df2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	f040 814a 	bne.w	8003db2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8143 	beq.w	8003db2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 813c 	beq.w	8003db2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	f040 80b4 	bne.w	8003cc8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8140 	beq.w	8003df6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	f080 8139 	bcs.w	8003df6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b96:	f000 8088 	beq.w	8003caa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1d9      	bne.n	8003b9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3314      	adds	r3, #20
 8003bec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3314      	adds	r3, #20
 8003c06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e1      	bne.n	8003be6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3314      	adds	r3, #20
 8003c28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3314      	adds	r3, #20
 8003c42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e3      	bne.n	8003c22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7a:	f023 0310 	bic.w	r3, r3, #16
 8003c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e3      	bne.n	8003c68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fd fe6c 	bl	8001982 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f8c0 	bl	8003e40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cc0:	e099      	b.n	8003df6 <HAL_UART_IRQHandler+0x50e>
 8003cc2:	bf00      	nop
 8003cc4:	08003f1f 	.word	0x08003f1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 808b 	beq.w	8003dfa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8086 	beq.w	8003dfa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d12:	647a      	str	r2, [r7, #68]	; 0x44
 8003d14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e3      	bne.n	8003cee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	623b      	str	r3, [r7, #32]
   return(result);
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3314      	adds	r3, #20
 8003d46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d4a:	633a      	str	r2, [r7, #48]	; 0x30
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e3      	bne.n	8003d26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0310 	bic.w	r3, r3, #16
 8003d82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d90:	61fa      	str	r2, [r7, #28]
 8003d92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	69b9      	ldr	r1, [r7, #24]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e3      	bne.n	8003d6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003da8:	4619      	mov	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f848 	bl	8003e40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003db0:	e023      	b.n	8003dfa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x4ea>
 8003dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8bb 	bl	8003f46 <UART_Transmit_IT>
    return;
 8003dd0:	e014      	b.n	8003dfc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00e      	beq.n	8003dfc <HAL_UART_IRQHandler+0x514>
 8003dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f8fb 	bl	8003fe6 <UART_EndTransmit_IT>
    return;
 8003df0:	e004      	b.n	8003dfc <HAL_UART_IRQHandler+0x514>
    return;
 8003df2:	bf00      	nop
 8003df4:	e002      	b.n	8003dfc <HAL_UART_IRQHandler+0x514>
      return;
 8003df6:	bf00      	nop
 8003df8:	e000      	b.n	8003dfc <HAL_UART_IRQHandler+0x514>
      return;
 8003dfa:	bf00      	nop
  }
}
 8003dfc:	37e8      	adds	r7, #232	; 0xe8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop

08003e04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b095      	sub	sp, #84	; 0x54
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e80:	643a      	str	r2, [r7, #64]	; 0x40
 8003e82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3314      	adds	r3, #20
 8003e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e5      	bne.n	8003e94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d119      	bne.n	8003f04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f023 0310 	bic.w	r3, r3, #16
 8003ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ef0:	61ba      	str	r2, [r7, #24]
 8003ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6979      	ldr	r1, [r7, #20]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	613b      	str	r3, [r7, #16]
   return(result);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f12:	bf00      	nop
 8003f14:	3754      	adds	r7, #84	; 0x54
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff ff77 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b21      	cmp	r3, #33	; 0x21
 8003f58:	d13e      	bne.n	8003fd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f62:	d114      	bne.n	8003f8e <UART_Transmit_IT+0x48>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d110      	bne.n	8003f8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	1c9a      	adds	r2, r3, #2
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	621a      	str	r2, [r3, #32]
 8003f8c:	e008      	b.n	8003fa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	1c59      	adds	r1, r3, #1
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6211      	str	r1, [r2, #32]
 8003f98:	781a      	ldrb	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4619      	mov	r1, r3
 8003fae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10f      	bne.n	8003fd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e000      	b.n	8003fda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fefc 	bl	8003e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b08c      	sub	sp, #48	; 0x30
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b22      	cmp	r3, #34	; 0x22
 8004028:	f040 80ab 	bne.w	8004182 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004034:	d117      	bne.n	8004066 <UART_Receive_IT+0x50>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d113      	bne.n	8004066 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004054:	b29a      	uxth	r2, r3
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	1c9a      	adds	r2, r3, #2
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	629a      	str	r2, [r3, #40]	; 0x28
 8004064:	e026      	b.n	80040b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004078:	d007      	beq.n	800408a <UART_Receive_IT+0x74>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <UART_Receive_IT+0x82>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	b2da      	uxtb	r2, r3
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e008      	b.n	80040aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29b      	uxth	r3, r3
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4619      	mov	r1, r3
 80040c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d15a      	bne.n	800417e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0220 	bic.w	r2, r2, #32
 80040d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	2b01      	cmp	r3, #1
 8004106:	d135      	bne.n	8004174 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	613b      	str	r3, [r7, #16]
   return(result);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f023 0310 	bic.w	r3, r3, #16
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412e:	623a      	str	r2, [r7, #32]
 8004130:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	69f9      	ldr	r1, [r7, #28]
 8004134:	6a3a      	ldr	r2, [r7, #32]
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	61bb      	str	r3, [r7, #24]
   return(result);
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e5      	bne.n	800410e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b10      	cmp	r3, #16
 800414e:	d10a      	bne.n	8004166 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fe67 	bl	8003e40 <HAL_UARTEx_RxEventCallback>
 8004172:	e002      	b.n	800417a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff fe4f 	bl	8003e18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e002      	b.n	8004184 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004182:	2302      	movs	r3, #2
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3730      	adds	r7, #48	; 0x30
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800418c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004190:	b0c0      	sub	sp, #256	; 0x100
 8004192:	af00      	add	r7, sp, #0
 8004194:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	68d9      	ldr	r1, [r3, #12]
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	ea40 0301 	orr.w	r3, r0, r1
 80041b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041e4:	f021 010c 	bic.w	r1, r1, #12
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041f2:	430b      	orrs	r3, r1
 80041f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004206:	6999      	ldr	r1, [r3, #24]
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	ea40 0301 	orr.w	r3, r0, r1
 8004212:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b8f      	ldr	r3, [pc, #572]	; (8004458 <UART_SetConfig+0x2cc>)
 800421c:	429a      	cmp	r2, r3
 800421e:	d005      	beq.n	800422c <UART_SetConfig+0xa0>
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b8d      	ldr	r3, [pc, #564]	; (800445c <UART_SetConfig+0x2d0>)
 8004228:	429a      	cmp	r2, r3
 800422a:	d104      	bne.n	8004236 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800422c:	f7fd fef0 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8004230:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004234:	e003      	b.n	800423e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004236:	f7fd fed7 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 800423a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004248:	f040 810c 	bne.w	8004464 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800424c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004250:	2200      	movs	r2, #0
 8004252:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004256:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800425a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800425e:	4622      	mov	r2, r4
 8004260:	462b      	mov	r3, r5
 8004262:	1891      	adds	r1, r2, r2
 8004264:	65b9      	str	r1, [r7, #88]	; 0x58
 8004266:	415b      	adcs	r3, r3
 8004268:	65fb      	str	r3, [r7, #92]	; 0x5c
 800426a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800426e:	4621      	mov	r1, r4
 8004270:	eb12 0801 	adds.w	r8, r2, r1
 8004274:	4629      	mov	r1, r5
 8004276:	eb43 0901 	adc.w	r9, r3, r1
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800428a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428e:	4690      	mov	r8, r2
 8004290:	4699      	mov	r9, r3
 8004292:	4623      	mov	r3, r4
 8004294:	eb18 0303 	adds.w	r3, r8, r3
 8004298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800429c:	462b      	mov	r3, r5
 800429e:	eb49 0303 	adc.w	r3, r9, r3
 80042a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042ba:	460b      	mov	r3, r1
 80042bc:	18db      	adds	r3, r3, r3
 80042be:	653b      	str	r3, [r7, #80]	; 0x50
 80042c0:	4613      	mov	r3, r2
 80042c2:	eb42 0303 	adc.w	r3, r2, r3
 80042c6:	657b      	str	r3, [r7, #84]	; 0x54
 80042c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042d0:	f7fc fbdc 	bl	8000a8c <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4b61      	ldr	r3, [pc, #388]	; (8004460 <UART_SetConfig+0x2d4>)
 80042da:	fba3 2302 	umull	r2, r3, r3, r2
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	011c      	lsls	r4, r3, #4
 80042e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	1891      	adds	r1, r2, r2
 80042fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80042fc:	415b      	adcs	r3, r3
 80042fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004300:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004304:	4641      	mov	r1, r8
 8004306:	eb12 0a01 	adds.w	sl, r2, r1
 800430a:	4649      	mov	r1, r9
 800430c:	eb43 0b01 	adc.w	fp, r3, r1
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800431c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004320:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004324:	4692      	mov	sl, r2
 8004326:	469b      	mov	fp, r3
 8004328:	4643      	mov	r3, r8
 800432a:	eb1a 0303 	adds.w	r3, sl, r3
 800432e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004332:	464b      	mov	r3, r9
 8004334:	eb4b 0303 	adc.w	r3, fp, r3
 8004338:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004348:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800434c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004350:	460b      	mov	r3, r1
 8004352:	18db      	adds	r3, r3, r3
 8004354:	643b      	str	r3, [r7, #64]	; 0x40
 8004356:	4613      	mov	r3, r2
 8004358:	eb42 0303 	adc.w	r3, r2, r3
 800435c:	647b      	str	r3, [r7, #68]	; 0x44
 800435e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004362:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004366:	f7fc fb91 	bl	8000a8c <__aeabi_uldivmod>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4611      	mov	r1, r2
 8004370:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <UART_SetConfig+0x2d4>)
 8004372:	fba3 2301 	umull	r2, r3, r3, r1
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2264      	movs	r2, #100	; 0x64
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	1acb      	subs	r3, r1, r3
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004386:	4b36      	ldr	r3, [pc, #216]	; (8004460 <UART_SetConfig+0x2d4>)
 8004388:	fba3 2302 	umull	r2, r3, r3, r2
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004394:	441c      	add	r4, r3
 8004396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	1891      	adds	r1, r2, r2
 80043ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80043b0:	415b      	adcs	r3, r3
 80043b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043b8:	4641      	mov	r1, r8
 80043ba:	1851      	adds	r1, r2, r1
 80043bc:	6339      	str	r1, [r7, #48]	; 0x30
 80043be:	4649      	mov	r1, r9
 80043c0:	414b      	adcs	r3, r1
 80043c2:	637b      	str	r3, [r7, #52]	; 0x34
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043d0:	4659      	mov	r1, fp
 80043d2:	00cb      	lsls	r3, r1, #3
 80043d4:	4651      	mov	r1, sl
 80043d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043da:	4651      	mov	r1, sl
 80043dc:	00ca      	lsls	r2, r1, #3
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	4642      	mov	r2, r8
 80043e6:	189b      	adds	r3, r3, r2
 80043e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043ec:	464b      	mov	r3, r9
 80043ee:	460a      	mov	r2, r1
 80043f0:	eb42 0303 	adc.w	r3, r2, r3
 80043f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004404:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004408:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800440c:	460b      	mov	r3, r1
 800440e:	18db      	adds	r3, r3, r3
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
 8004412:	4613      	mov	r3, r2
 8004414:	eb42 0303 	adc.w	r3, r2, r3
 8004418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800441e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004422:	f7fc fb33 	bl	8000a8c <__aeabi_uldivmod>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <UART_SetConfig+0x2d4>)
 800442c:	fba3 1302 	umull	r1, r3, r3, r2
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	2164      	movs	r1, #100	; 0x64
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	3332      	adds	r3, #50	; 0x32
 800443e:	4a08      	ldr	r2, [pc, #32]	; (8004460 <UART_SetConfig+0x2d4>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	f003 0207 	and.w	r2, r3, #7
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4422      	add	r2, r4
 8004452:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004454:	e105      	b.n	8004662 <UART_SetConfig+0x4d6>
 8004456:	bf00      	nop
 8004458:	40011000 	.word	0x40011000
 800445c:	40011400 	.word	0x40011400
 8004460:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004468:	2200      	movs	r2, #0
 800446a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800446e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004472:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004476:	4642      	mov	r2, r8
 8004478:	464b      	mov	r3, r9
 800447a:	1891      	adds	r1, r2, r2
 800447c:	6239      	str	r1, [r7, #32]
 800447e:	415b      	adcs	r3, r3
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
 8004482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004486:	4641      	mov	r1, r8
 8004488:	1854      	adds	r4, r2, r1
 800448a:	4649      	mov	r1, r9
 800448c:	eb43 0501 	adc.w	r5, r3, r1
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	00eb      	lsls	r3, r5, #3
 800449a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800449e:	00e2      	lsls	r2, r4, #3
 80044a0:	4614      	mov	r4, r2
 80044a2:	461d      	mov	r5, r3
 80044a4:	4643      	mov	r3, r8
 80044a6:	18e3      	adds	r3, r4, r3
 80044a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044ac:	464b      	mov	r3, r9
 80044ae:	eb45 0303 	adc.w	r3, r5, r3
 80044b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044d2:	4629      	mov	r1, r5
 80044d4:	008b      	lsls	r3, r1, #2
 80044d6:	4621      	mov	r1, r4
 80044d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044dc:	4621      	mov	r1, r4
 80044de:	008a      	lsls	r2, r1, #2
 80044e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044e4:	f7fc fad2 	bl	8000a8c <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4b60      	ldr	r3, [pc, #384]	; (8004670 <UART_SetConfig+0x4e4>)
 80044ee:	fba3 2302 	umull	r2, r3, r3, r2
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	011c      	lsls	r4, r3, #4
 80044f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004500:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004504:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004508:	4642      	mov	r2, r8
 800450a:	464b      	mov	r3, r9
 800450c:	1891      	adds	r1, r2, r2
 800450e:	61b9      	str	r1, [r7, #24]
 8004510:	415b      	adcs	r3, r3
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004518:	4641      	mov	r1, r8
 800451a:	1851      	adds	r1, r2, r1
 800451c:	6139      	str	r1, [r7, #16]
 800451e:	4649      	mov	r1, r9
 8004520:	414b      	adcs	r3, r1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004530:	4659      	mov	r1, fp
 8004532:	00cb      	lsls	r3, r1, #3
 8004534:	4651      	mov	r1, sl
 8004536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453a:	4651      	mov	r1, sl
 800453c:	00ca      	lsls	r2, r1, #3
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	4603      	mov	r3, r0
 8004544:	4642      	mov	r2, r8
 8004546:	189b      	adds	r3, r3, r2
 8004548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800454c:	464b      	mov	r3, r9
 800454e:	460a      	mov	r2, r1
 8004550:	eb42 0303 	adc.w	r3, r2, r3
 8004554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	67bb      	str	r3, [r7, #120]	; 0x78
 8004562:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004570:	4649      	mov	r1, r9
 8004572:	008b      	lsls	r3, r1, #2
 8004574:	4641      	mov	r1, r8
 8004576:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800457a:	4641      	mov	r1, r8
 800457c:	008a      	lsls	r2, r1, #2
 800457e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004582:	f7fc fa83 	bl	8000a8c <__aeabi_uldivmod>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4b39      	ldr	r3, [pc, #228]	; (8004670 <UART_SetConfig+0x4e4>)
 800458c:	fba3 1302 	umull	r1, r3, r3, r2
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	2164      	movs	r1, #100	; 0x64
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	3332      	adds	r3, #50	; 0x32
 800459e:	4a34      	ldr	r2, [pc, #208]	; (8004670 <UART_SetConfig+0x4e4>)
 80045a0:	fba2 2303 	umull	r2, r3, r2, r3
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045aa:	441c      	add	r4, r3
 80045ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045b0:	2200      	movs	r2, #0
 80045b2:	673b      	str	r3, [r7, #112]	; 0x70
 80045b4:	677a      	str	r2, [r7, #116]	; 0x74
 80045b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045ba:	4642      	mov	r2, r8
 80045bc:	464b      	mov	r3, r9
 80045be:	1891      	adds	r1, r2, r2
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	415b      	adcs	r3, r3
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045ca:	4641      	mov	r1, r8
 80045cc:	1851      	adds	r1, r2, r1
 80045ce:	6039      	str	r1, [r7, #0]
 80045d0:	4649      	mov	r1, r9
 80045d2:	414b      	adcs	r3, r1
 80045d4:	607b      	str	r3, [r7, #4]
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045e2:	4659      	mov	r1, fp
 80045e4:	00cb      	lsls	r3, r1, #3
 80045e6:	4651      	mov	r1, sl
 80045e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ec:	4651      	mov	r1, sl
 80045ee:	00ca      	lsls	r2, r1, #3
 80045f0:	4610      	mov	r0, r2
 80045f2:	4619      	mov	r1, r3
 80045f4:	4603      	mov	r3, r0
 80045f6:	4642      	mov	r2, r8
 80045f8:	189b      	adds	r3, r3, r2
 80045fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80045fc:	464b      	mov	r3, r9
 80045fe:	460a      	mov	r2, r1
 8004600:	eb42 0303 	adc.w	r3, r2, r3
 8004604:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	663b      	str	r3, [r7, #96]	; 0x60
 8004610:	667a      	str	r2, [r7, #100]	; 0x64
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800461e:	4649      	mov	r1, r9
 8004620:	008b      	lsls	r3, r1, #2
 8004622:	4641      	mov	r1, r8
 8004624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004628:	4641      	mov	r1, r8
 800462a:	008a      	lsls	r2, r1, #2
 800462c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004630:	f7fc fa2c 	bl	8000a8c <__aeabi_uldivmod>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <UART_SetConfig+0x4e4>)
 800463a:	fba3 1302 	umull	r1, r3, r3, r2
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	2164      	movs	r1, #100	; 0x64
 8004642:	fb01 f303 	mul.w	r3, r1, r3
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	3332      	adds	r3, #50	; 0x32
 800464c:	4a08      	ldr	r2, [pc, #32]	; (8004670 <UART_SetConfig+0x4e4>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	f003 020f 	and.w	r2, r3, #15
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4422      	add	r2, r4
 8004660:	609a      	str	r2, [r3, #8]
}
 8004662:	bf00      	nop
 8004664:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004668:	46bd      	mov	sp, r7
 800466a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466e:	bf00      	nop
 8004670:	51eb851f 	.word	0x51eb851f

08004674 <__errno>:
 8004674:	4b01      	ldr	r3, [pc, #4]	; (800467c <__errno+0x8>)
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	2000000c 	.word	0x2000000c

08004680 <__libc_init_array>:
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	4d0d      	ldr	r5, [pc, #52]	; (80046b8 <__libc_init_array+0x38>)
 8004684:	4c0d      	ldr	r4, [pc, #52]	; (80046bc <__libc_init_array+0x3c>)
 8004686:	1b64      	subs	r4, r4, r5
 8004688:	10a4      	asrs	r4, r4, #2
 800468a:	2600      	movs	r6, #0
 800468c:	42a6      	cmp	r6, r4
 800468e:	d109      	bne.n	80046a4 <__libc_init_array+0x24>
 8004690:	4d0b      	ldr	r5, [pc, #44]	; (80046c0 <__libc_init_array+0x40>)
 8004692:	4c0c      	ldr	r4, [pc, #48]	; (80046c4 <__libc_init_array+0x44>)
 8004694:	f000 ffae 	bl	80055f4 <_init>
 8004698:	1b64      	subs	r4, r4, r5
 800469a:	10a4      	asrs	r4, r4, #2
 800469c:	2600      	movs	r6, #0
 800469e:	42a6      	cmp	r6, r4
 80046a0:	d105      	bne.n	80046ae <__libc_init_array+0x2e>
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
 80046a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a8:	4798      	blx	r3
 80046aa:	3601      	adds	r6, #1
 80046ac:	e7ee      	b.n	800468c <__libc_init_array+0xc>
 80046ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b2:	4798      	blx	r3
 80046b4:	3601      	adds	r6, #1
 80046b6:	e7f2      	b.n	800469e <__libc_init_array+0x1e>
 80046b8:	080056cc 	.word	0x080056cc
 80046bc:	080056cc 	.word	0x080056cc
 80046c0:	080056cc 	.word	0x080056cc
 80046c4:	080056d0 	.word	0x080056d0

080046c8 <memset>:
 80046c8:	4402      	add	r2, r0
 80046ca:	4603      	mov	r3, r0
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d100      	bne.n	80046d2 <memset+0xa>
 80046d0:	4770      	bx	lr
 80046d2:	f803 1b01 	strb.w	r1, [r3], #1
 80046d6:	e7f9      	b.n	80046cc <memset+0x4>

080046d8 <iprintf>:
 80046d8:	b40f      	push	{r0, r1, r2, r3}
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <iprintf+0x2c>)
 80046dc:	b513      	push	{r0, r1, r4, lr}
 80046de:	681c      	ldr	r4, [r3, #0]
 80046e0:	b124      	cbz	r4, 80046ec <iprintf+0x14>
 80046e2:	69a3      	ldr	r3, [r4, #24]
 80046e4:	b913      	cbnz	r3, 80046ec <iprintf+0x14>
 80046e6:	4620      	mov	r0, r4
 80046e8:	f000 f866 	bl	80047b8 <__sinit>
 80046ec:	ab05      	add	r3, sp, #20
 80046ee:	9a04      	ldr	r2, [sp, #16]
 80046f0:	68a1      	ldr	r1, [r4, #8]
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	4620      	mov	r0, r4
 80046f6:	f000 f9bd 	bl	8004a74 <_vfiprintf_r>
 80046fa:	b002      	add	sp, #8
 80046fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004700:	b004      	add	sp, #16
 8004702:	4770      	bx	lr
 8004704:	2000000c 	.word	0x2000000c

08004708 <std>:
 8004708:	2300      	movs	r3, #0
 800470a:	b510      	push	{r4, lr}
 800470c:	4604      	mov	r4, r0
 800470e:	e9c0 3300 	strd	r3, r3, [r0]
 8004712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004716:	6083      	str	r3, [r0, #8]
 8004718:	8181      	strh	r1, [r0, #12]
 800471a:	6643      	str	r3, [r0, #100]	; 0x64
 800471c:	81c2      	strh	r2, [r0, #14]
 800471e:	6183      	str	r3, [r0, #24]
 8004720:	4619      	mov	r1, r3
 8004722:	2208      	movs	r2, #8
 8004724:	305c      	adds	r0, #92	; 0x5c
 8004726:	f7ff ffcf 	bl	80046c8 <memset>
 800472a:	4b05      	ldr	r3, [pc, #20]	; (8004740 <std+0x38>)
 800472c:	6263      	str	r3, [r4, #36]	; 0x24
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <std+0x3c>)
 8004730:	62a3      	str	r3, [r4, #40]	; 0x28
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <std+0x40>)
 8004734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <std+0x44>)
 8004738:	6224      	str	r4, [r4, #32]
 800473a:	6323      	str	r3, [r4, #48]	; 0x30
 800473c:	bd10      	pop	{r4, pc}
 800473e:	bf00      	nop
 8004740:	0800501d 	.word	0x0800501d
 8004744:	0800503f 	.word	0x0800503f
 8004748:	08005077 	.word	0x08005077
 800474c:	0800509b 	.word	0x0800509b

08004750 <_cleanup_r>:
 8004750:	4901      	ldr	r1, [pc, #4]	; (8004758 <_cleanup_r+0x8>)
 8004752:	f000 b8af 	b.w	80048b4 <_fwalk_reent>
 8004756:	bf00      	nop
 8004758:	08005375 	.word	0x08005375

0800475c <__sfmoreglue>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	2268      	movs	r2, #104	; 0x68
 8004760:	1e4d      	subs	r5, r1, #1
 8004762:	4355      	muls	r5, r2
 8004764:	460e      	mov	r6, r1
 8004766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800476a:	f000 f8e5 	bl	8004938 <_malloc_r>
 800476e:	4604      	mov	r4, r0
 8004770:	b140      	cbz	r0, 8004784 <__sfmoreglue+0x28>
 8004772:	2100      	movs	r1, #0
 8004774:	e9c0 1600 	strd	r1, r6, [r0]
 8004778:	300c      	adds	r0, #12
 800477a:	60a0      	str	r0, [r4, #8]
 800477c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004780:	f7ff ffa2 	bl	80046c8 <memset>
 8004784:	4620      	mov	r0, r4
 8004786:	bd70      	pop	{r4, r5, r6, pc}

08004788 <__sfp_lock_acquire>:
 8004788:	4801      	ldr	r0, [pc, #4]	; (8004790 <__sfp_lock_acquire+0x8>)
 800478a:	f000 b8b3 	b.w	80048f4 <__retarget_lock_acquire_recursive>
 800478e:	bf00      	nop
 8004790:	20000131 	.word	0x20000131

08004794 <__sfp_lock_release>:
 8004794:	4801      	ldr	r0, [pc, #4]	; (800479c <__sfp_lock_release+0x8>)
 8004796:	f000 b8ae 	b.w	80048f6 <__retarget_lock_release_recursive>
 800479a:	bf00      	nop
 800479c:	20000131 	.word	0x20000131

080047a0 <__sinit_lock_acquire>:
 80047a0:	4801      	ldr	r0, [pc, #4]	; (80047a8 <__sinit_lock_acquire+0x8>)
 80047a2:	f000 b8a7 	b.w	80048f4 <__retarget_lock_acquire_recursive>
 80047a6:	bf00      	nop
 80047a8:	20000132 	.word	0x20000132

080047ac <__sinit_lock_release>:
 80047ac:	4801      	ldr	r0, [pc, #4]	; (80047b4 <__sinit_lock_release+0x8>)
 80047ae:	f000 b8a2 	b.w	80048f6 <__retarget_lock_release_recursive>
 80047b2:	bf00      	nop
 80047b4:	20000132 	.word	0x20000132

080047b8 <__sinit>:
 80047b8:	b510      	push	{r4, lr}
 80047ba:	4604      	mov	r4, r0
 80047bc:	f7ff fff0 	bl	80047a0 <__sinit_lock_acquire>
 80047c0:	69a3      	ldr	r3, [r4, #24]
 80047c2:	b11b      	cbz	r3, 80047cc <__sinit+0x14>
 80047c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c8:	f7ff bff0 	b.w	80047ac <__sinit_lock_release>
 80047cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047d0:	6523      	str	r3, [r4, #80]	; 0x50
 80047d2:	4b13      	ldr	r3, [pc, #76]	; (8004820 <__sinit+0x68>)
 80047d4:	4a13      	ldr	r2, [pc, #76]	; (8004824 <__sinit+0x6c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80047da:	42a3      	cmp	r3, r4
 80047dc:	bf04      	itt	eq
 80047de:	2301      	moveq	r3, #1
 80047e0:	61a3      	streq	r3, [r4, #24]
 80047e2:	4620      	mov	r0, r4
 80047e4:	f000 f820 	bl	8004828 <__sfp>
 80047e8:	6060      	str	r0, [r4, #4]
 80047ea:	4620      	mov	r0, r4
 80047ec:	f000 f81c 	bl	8004828 <__sfp>
 80047f0:	60a0      	str	r0, [r4, #8]
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 f818 	bl	8004828 <__sfp>
 80047f8:	2200      	movs	r2, #0
 80047fa:	60e0      	str	r0, [r4, #12]
 80047fc:	2104      	movs	r1, #4
 80047fe:	6860      	ldr	r0, [r4, #4]
 8004800:	f7ff ff82 	bl	8004708 <std>
 8004804:	68a0      	ldr	r0, [r4, #8]
 8004806:	2201      	movs	r2, #1
 8004808:	2109      	movs	r1, #9
 800480a:	f7ff ff7d 	bl	8004708 <std>
 800480e:	68e0      	ldr	r0, [r4, #12]
 8004810:	2202      	movs	r2, #2
 8004812:	2112      	movs	r1, #18
 8004814:	f7ff ff78 	bl	8004708 <std>
 8004818:	2301      	movs	r3, #1
 800481a:	61a3      	str	r3, [r4, #24]
 800481c:	e7d2      	b.n	80047c4 <__sinit+0xc>
 800481e:	bf00      	nop
 8004820:	0800562c 	.word	0x0800562c
 8004824:	08004751 	.word	0x08004751

08004828 <__sfp>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	4607      	mov	r7, r0
 800482c:	f7ff ffac 	bl	8004788 <__sfp_lock_acquire>
 8004830:	4b1e      	ldr	r3, [pc, #120]	; (80048ac <__sfp+0x84>)
 8004832:	681e      	ldr	r6, [r3, #0]
 8004834:	69b3      	ldr	r3, [r6, #24]
 8004836:	b913      	cbnz	r3, 800483e <__sfp+0x16>
 8004838:	4630      	mov	r0, r6
 800483a:	f7ff ffbd 	bl	80047b8 <__sinit>
 800483e:	3648      	adds	r6, #72	; 0x48
 8004840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004844:	3b01      	subs	r3, #1
 8004846:	d503      	bpl.n	8004850 <__sfp+0x28>
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	b30b      	cbz	r3, 8004890 <__sfp+0x68>
 800484c:	6836      	ldr	r6, [r6, #0]
 800484e:	e7f7      	b.n	8004840 <__sfp+0x18>
 8004850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004854:	b9d5      	cbnz	r5, 800488c <__sfp+0x64>
 8004856:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <__sfp+0x88>)
 8004858:	60e3      	str	r3, [r4, #12]
 800485a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800485e:	6665      	str	r5, [r4, #100]	; 0x64
 8004860:	f000 f847 	bl	80048f2 <__retarget_lock_init_recursive>
 8004864:	f7ff ff96 	bl	8004794 <__sfp_lock_release>
 8004868:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800486c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004870:	6025      	str	r5, [r4, #0]
 8004872:	61a5      	str	r5, [r4, #24]
 8004874:	2208      	movs	r2, #8
 8004876:	4629      	mov	r1, r5
 8004878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800487c:	f7ff ff24 	bl	80046c8 <memset>
 8004880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004888:	4620      	mov	r0, r4
 800488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800488c:	3468      	adds	r4, #104	; 0x68
 800488e:	e7d9      	b.n	8004844 <__sfp+0x1c>
 8004890:	2104      	movs	r1, #4
 8004892:	4638      	mov	r0, r7
 8004894:	f7ff ff62 	bl	800475c <__sfmoreglue>
 8004898:	4604      	mov	r4, r0
 800489a:	6030      	str	r0, [r6, #0]
 800489c:	2800      	cmp	r0, #0
 800489e:	d1d5      	bne.n	800484c <__sfp+0x24>
 80048a0:	f7ff ff78 	bl	8004794 <__sfp_lock_release>
 80048a4:	230c      	movs	r3, #12
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	e7ee      	b.n	8004888 <__sfp+0x60>
 80048aa:	bf00      	nop
 80048ac:	0800562c 	.word	0x0800562c
 80048b0:	ffff0001 	.word	0xffff0001

080048b4 <_fwalk_reent>:
 80048b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048b8:	4606      	mov	r6, r0
 80048ba:	4688      	mov	r8, r1
 80048bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048c0:	2700      	movs	r7, #0
 80048c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048c6:	f1b9 0901 	subs.w	r9, r9, #1
 80048ca:	d505      	bpl.n	80048d8 <_fwalk_reent+0x24>
 80048cc:	6824      	ldr	r4, [r4, #0]
 80048ce:	2c00      	cmp	r4, #0
 80048d0:	d1f7      	bne.n	80048c2 <_fwalk_reent+0xe>
 80048d2:	4638      	mov	r0, r7
 80048d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048d8:	89ab      	ldrh	r3, [r5, #12]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d907      	bls.n	80048ee <_fwalk_reent+0x3a>
 80048de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048e2:	3301      	adds	r3, #1
 80048e4:	d003      	beq.n	80048ee <_fwalk_reent+0x3a>
 80048e6:	4629      	mov	r1, r5
 80048e8:	4630      	mov	r0, r6
 80048ea:	47c0      	blx	r8
 80048ec:	4307      	orrs	r7, r0
 80048ee:	3568      	adds	r5, #104	; 0x68
 80048f0:	e7e9      	b.n	80048c6 <_fwalk_reent+0x12>

080048f2 <__retarget_lock_init_recursive>:
 80048f2:	4770      	bx	lr

080048f4 <__retarget_lock_acquire_recursive>:
 80048f4:	4770      	bx	lr

080048f6 <__retarget_lock_release_recursive>:
 80048f6:	4770      	bx	lr

080048f8 <sbrk_aligned>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	4e0e      	ldr	r6, [pc, #56]	; (8004934 <sbrk_aligned+0x3c>)
 80048fc:	460c      	mov	r4, r1
 80048fe:	6831      	ldr	r1, [r6, #0]
 8004900:	4605      	mov	r5, r0
 8004902:	b911      	cbnz	r1, 800490a <sbrk_aligned+0x12>
 8004904:	f000 fb7a 	bl	8004ffc <_sbrk_r>
 8004908:	6030      	str	r0, [r6, #0]
 800490a:	4621      	mov	r1, r4
 800490c:	4628      	mov	r0, r5
 800490e:	f000 fb75 	bl	8004ffc <_sbrk_r>
 8004912:	1c43      	adds	r3, r0, #1
 8004914:	d00a      	beq.n	800492c <sbrk_aligned+0x34>
 8004916:	1cc4      	adds	r4, r0, #3
 8004918:	f024 0403 	bic.w	r4, r4, #3
 800491c:	42a0      	cmp	r0, r4
 800491e:	d007      	beq.n	8004930 <sbrk_aligned+0x38>
 8004920:	1a21      	subs	r1, r4, r0
 8004922:	4628      	mov	r0, r5
 8004924:	f000 fb6a 	bl	8004ffc <_sbrk_r>
 8004928:	3001      	adds	r0, #1
 800492a:	d101      	bne.n	8004930 <sbrk_aligned+0x38>
 800492c:	f04f 34ff 	mov.w	r4, #4294967295
 8004930:	4620      	mov	r0, r4
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	20000138 	.word	0x20000138

08004938 <_malloc_r>:
 8004938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493c:	1ccd      	adds	r5, r1, #3
 800493e:	f025 0503 	bic.w	r5, r5, #3
 8004942:	3508      	adds	r5, #8
 8004944:	2d0c      	cmp	r5, #12
 8004946:	bf38      	it	cc
 8004948:	250c      	movcc	r5, #12
 800494a:	2d00      	cmp	r5, #0
 800494c:	4607      	mov	r7, r0
 800494e:	db01      	blt.n	8004954 <_malloc_r+0x1c>
 8004950:	42a9      	cmp	r1, r5
 8004952:	d905      	bls.n	8004960 <_malloc_r+0x28>
 8004954:	230c      	movs	r3, #12
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	2600      	movs	r6, #0
 800495a:	4630      	mov	r0, r6
 800495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004960:	4e2e      	ldr	r6, [pc, #184]	; (8004a1c <_malloc_r+0xe4>)
 8004962:	f000 fdbb 	bl	80054dc <__malloc_lock>
 8004966:	6833      	ldr	r3, [r6, #0]
 8004968:	461c      	mov	r4, r3
 800496a:	bb34      	cbnz	r4, 80049ba <_malloc_r+0x82>
 800496c:	4629      	mov	r1, r5
 800496e:	4638      	mov	r0, r7
 8004970:	f7ff ffc2 	bl	80048f8 <sbrk_aligned>
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	4604      	mov	r4, r0
 8004978:	d14d      	bne.n	8004a16 <_malloc_r+0xde>
 800497a:	6834      	ldr	r4, [r6, #0]
 800497c:	4626      	mov	r6, r4
 800497e:	2e00      	cmp	r6, #0
 8004980:	d140      	bne.n	8004a04 <_malloc_r+0xcc>
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	4631      	mov	r1, r6
 8004986:	4638      	mov	r0, r7
 8004988:	eb04 0803 	add.w	r8, r4, r3
 800498c:	f000 fb36 	bl	8004ffc <_sbrk_r>
 8004990:	4580      	cmp	r8, r0
 8004992:	d13a      	bne.n	8004a0a <_malloc_r+0xd2>
 8004994:	6821      	ldr	r1, [r4, #0]
 8004996:	3503      	adds	r5, #3
 8004998:	1a6d      	subs	r5, r5, r1
 800499a:	f025 0503 	bic.w	r5, r5, #3
 800499e:	3508      	adds	r5, #8
 80049a0:	2d0c      	cmp	r5, #12
 80049a2:	bf38      	it	cc
 80049a4:	250c      	movcc	r5, #12
 80049a6:	4629      	mov	r1, r5
 80049a8:	4638      	mov	r0, r7
 80049aa:	f7ff ffa5 	bl	80048f8 <sbrk_aligned>
 80049ae:	3001      	adds	r0, #1
 80049b0:	d02b      	beq.n	8004a0a <_malloc_r+0xd2>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	442b      	add	r3, r5
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	e00e      	b.n	80049d8 <_malloc_r+0xa0>
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	1b52      	subs	r2, r2, r5
 80049be:	d41e      	bmi.n	80049fe <_malloc_r+0xc6>
 80049c0:	2a0b      	cmp	r2, #11
 80049c2:	d916      	bls.n	80049f2 <_malloc_r+0xba>
 80049c4:	1961      	adds	r1, r4, r5
 80049c6:	42a3      	cmp	r3, r4
 80049c8:	6025      	str	r5, [r4, #0]
 80049ca:	bf18      	it	ne
 80049cc:	6059      	strne	r1, [r3, #4]
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	bf08      	it	eq
 80049d2:	6031      	streq	r1, [r6, #0]
 80049d4:	5162      	str	r2, [r4, r5]
 80049d6:	604b      	str	r3, [r1, #4]
 80049d8:	4638      	mov	r0, r7
 80049da:	f104 060b 	add.w	r6, r4, #11
 80049de:	f000 fd83 	bl	80054e8 <__malloc_unlock>
 80049e2:	f026 0607 	bic.w	r6, r6, #7
 80049e6:	1d23      	adds	r3, r4, #4
 80049e8:	1af2      	subs	r2, r6, r3
 80049ea:	d0b6      	beq.n	800495a <_malloc_r+0x22>
 80049ec:	1b9b      	subs	r3, r3, r6
 80049ee:	50a3      	str	r3, [r4, r2]
 80049f0:	e7b3      	b.n	800495a <_malloc_r+0x22>
 80049f2:	6862      	ldr	r2, [r4, #4]
 80049f4:	42a3      	cmp	r3, r4
 80049f6:	bf0c      	ite	eq
 80049f8:	6032      	streq	r2, [r6, #0]
 80049fa:	605a      	strne	r2, [r3, #4]
 80049fc:	e7ec      	b.n	80049d8 <_malloc_r+0xa0>
 80049fe:	4623      	mov	r3, r4
 8004a00:	6864      	ldr	r4, [r4, #4]
 8004a02:	e7b2      	b.n	800496a <_malloc_r+0x32>
 8004a04:	4634      	mov	r4, r6
 8004a06:	6876      	ldr	r6, [r6, #4]
 8004a08:	e7b9      	b.n	800497e <_malloc_r+0x46>
 8004a0a:	230c      	movs	r3, #12
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	4638      	mov	r0, r7
 8004a10:	f000 fd6a 	bl	80054e8 <__malloc_unlock>
 8004a14:	e7a1      	b.n	800495a <_malloc_r+0x22>
 8004a16:	6025      	str	r5, [r4, #0]
 8004a18:	e7de      	b.n	80049d8 <_malloc_r+0xa0>
 8004a1a:	bf00      	nop
 8004a1c:	20000134 	.word	0x20000134

08004a20 <__sfputc_r>:
 8004a20:	6893      	ldr	r3, [r2, #8]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	b410      	push	{r4}
 8004a28:	6093      	str	r3, [r2, #8]
 8004a2a:	da08      	bge.n	8004a3e <__sfputc_r+0x1e>
 8004a2c:	6994      	ldr	r4, [r2, #24]
 8004a2e:	42a3      	cmp	r3, r4
 8004a30:	db01      	blt.n	8004a36 <__sfputc_r+0x16>
 8004a32:	290a      	cmp	r1, #10
 8004a34:	d103      	bne.n	8004a3e <__sfputc_r+0x1e>
 8004a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a3a:	f000 bb33 	b.w	80050a4 <__swbuf_r>
 8004a3e:	6813      	ldr	r3, [r2, #0]
 8004a40:	1c58      	adds	r0, r3, #1
 8004a42:	6010      	str	r0, [r2, #0]
 8004a44:	7019      	strb	r1, [r3, #0]
 8004a46:	4608      	mov	r0, r1
 8004a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <__sfputs_r>:
 8004a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a50:	4606      	mov	r6, r0
 8004a52:	460f      	mov	r7, r1
 8004a54:	4614      	mov	r4, r2
 8004a56:	18d5      	adds	r5, r2, r3
 8004a58:	42ac      	cmp	r4, r5
 8004a5a:	d101      	bne.n	8004a60 <__sfputs_r+0x12>
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	e007      	b.n	8004a70 <__sfputs_r+0x22>
 8004a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a64:	463a      	mov	r2, r7
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff ffda 	bl	8004a20 <__sfputc_r>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d1f3      	bne.n	8004a58 <__sfputs_r+0xa>
 8004a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a74 <_vfiprintf_r>:
 8004a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a78:	460d      	mov	r5, r1
 8004a7a:	b09d      	sub	sp, #116	; 0x74
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	4698      	mov	r8, r3
 8004a80:	4606      	mov	r6, r0
 8004a82:	b118      	cbz	r0, 8004a8c <_vfiprintf_r+0x18>
 8004a84:	6983      	ldr	r3, [r0, #24]
 8004a86:	b90b      	cbnz	r3, 8004a8c <_vfiprintf_r+0x18>
 8004a88:	f7ff fe96 	bl	80047b8 <__sinit>
 8004a8c:	4b89      	ldr	r3, [pc, #548]	; (8004cb4 <_vfiprintf_r+0x240>)
 8004a8e:	429d      	cmp	r5, r3
 8004a90:	d11b      	bne.n	8004aca <_vfiprintf_r+0x56>
 8004a92:	6875      	ldr	r5, [r6, #4]
 8004a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a96:	07d9      	lsls	r1, r3, #31
 8004a98:	d405      	bmi.n	8004aa6 <_vfiprintf_r+0x32>
 8004a9a:	89ab      	ldrh	r3, [r5, #12]
 8004a9c:	059a      	lsls	r2, r3, #22
 8004a9e:	d402      	bmi.n	8004aa6 <_vfiprintf_r+0x32>
 8004aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004aa2:	f7ff ff27 	bl	80048f4 <__retarget_lock_acquire_recursive>
 8004aa6:	89ab      	ldrh	r3, [r5, #12]
 8004aa8:	071b      	lsls	r3, r3, #28
 8004aaa:	d501      	bpl.n	8004ab0 <_vfiprintf_r+0x3c>
 8004aac:	692b      	ldr	r3, [r5, #16]
 8004aae:	b9eb      	cbnz	r3, 8004aec <_vfiprintf_r+0x78>
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f000 fb5a 	bl	800516c <__swsetup_r>
 8004ab8:	b1c0      	cbz	r0, 8004aec <_vfiprintf_r+0x78>
 8004aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004abc:	07dc      	lsls	r4, r3, #31
 8004abe:	d50e      	bpl.n	8004ade <_vfiprintf_r+0x6a>
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac4:	b01d      	add	sp, #116	; 0x74
 8004ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aca:	4b7b      	ldr	r3, [pc, #492]	; (8004cb8 <_vfiprintf_r+0x244>)
 8004acc:	429d      	cmp	r5, r3
 8004ace:	d101      	bne.n	8004ad4 <_vfiprintf_r+0x60>
 8004ad0:	68b5      	ldr	r5, [r6, #8]
 8004ad2:	e7df      	b.n	8004a94 <_vfiprintf_r+0x20>
 8004ad4:	4b79      	ldr	r3, [pc, #484]	; (8004cbc <_vfiprintf_r+0x248>)
 8004ad6:	429d      	cmp	r5, r3
 8004ad8:	bf08      	it	eq
 8004ada:	68f5      	ldreq	r5, [r6, #12]
 8004adc:	e7da      	b.n	8004a94 <_vfiprintf_r+0x20>
 8004ade:	89ab      	ldrh	r3, [r5, #12]
 8004ae0:	0598      	lsls	r0, r3, #22
 8004ae2:	d4ed      	bmi.n	8004ac0 <_vfiprintf_r+0x4c>
 8004ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ae6:	f7ff ff06 	bl	80048f6 <__retarget_lock_release_recursive>
 8004aea:	e7e9      	b.n	8004ac0 <_vfiprintf_r+0x4c>
 8004aec:	2300      	movs	r3, #0
 8004aee:	9309      	str	r3, [sp, #36]	; 0x24
 8004af0:	2320      	movs	r3, #32
 8004af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004afa:	2330      	movs	r3, #48	; 0x30
 8004afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004cc0 <_vfiprintf_r+0x24c>
 8004b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b04:	f04f 0901 	mov.w	r9, #1
 8004b08:	4623      	mov	r3, r4
 8004b0a:	469a      	mov	sl, r3
 8004b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b10:	b10a      	cbz	r2, 8004b16 <_vfiprintf_r+0xa2>
 8004b12:	2a25      	cmp	r2, #37	; 0x25
 8004b14:	d1f9      	bne.n	8004b0a <_vfiprintf_r+0x96>
 8004b16:	ebba 0b04 	subs.w	fp, sl, r4
 8004b1a:	d00b      	beq.n	8004b34 <_vfiprintf_r+0xc0>
 8004b1c:	465b      	mov	r3, fp
 8004b1e:	4622      	mov	r2, r4
 8004b20:	4629      	mov	r1, r5
 8004b22:	4630      	mov	r0, r6
 8004b24:	f7ff ff93 	bl	8004a4e <__sfputs_r>
 8004b28:	3001      	adds	r0, #1
 8004b2a:	f000 80aa 	beq.w	8004c82 <_vfiprintf_r+0x20e>
 8004b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b30:	445a      	add	r2, fp
 8004b32:	9209      	str	r2, [sp, #36]	; 0x24
 8004b34:	f89a 3000 	ldrb.w	r3, [sl]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80a2 	beq.w	8004c82 <_vfiprintf_r+0x20e>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f04f 32ff 	mov.w	r2, #4294967295
 8004b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b48:	f10a 0a01 	add.w	sl, sl, #1
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	9307      	str	r3, [sp, #28]
 8004b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b54:	931a      	str	r3, [sp, #104]	; 0x68
 8004b56:	4654      	mov	r4, sl
 8004b58:	2205      	movs	r2, #5
 8004b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b5e:	4858      	ldr	r0, [pc, #352]	; (8004cc0 <_vfiprintf_r+0x24c>)
 8004b60:	f7fb fb56 	bl	8000210 <memchr>
 8004b64:	9a04      	ldr	r2, [sp, #16]
 8004b66:	b9d8      	cbnz	r0, 8004ba0 <_vfiprintf_r+0x12c>
 8004b68:	06d1      	lsls	r1, r2, #27
 8004b6a:	bf44      	itt	mi
 8004b6c:	2320      	movmi	r3, #32
 8004b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b72:	0713      	lsls	r3, r2, #28
 8004b74:	bf44      	itt	mi
 8004b76:	232b      	movmi	r3, #43	; 0x2b
 8004b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b80:	2b2a      	cmp	r3, #42	; 0x2a
 8004b82:	d015      	beq.n	8004bb0 <_vfiprintf_r+0x13c>
 8004b84:	9a07      	ldr	r2, [sp, #28]
 8004b86:	4654      	mov	r4, sl
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f04f 0c0a 	mov.w	ip, #10
 8004b8e:	4621      	mov	r1, r4
 8004b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b94:	3b30      	subs	r3, #48	; 0x30
 8004b96:	2b09      	cmp	r3, #9
 8004b98:	d94e      	bls.n	8004c38 <_vfiprintf_r+0x1c4>
 8004b9a:	b1b0      	cbz	r0, 8004bca <_vfiprintf_r+0x156>
 8004b9c:	9207      	str	r2, [sp, #28]
 8004b9e:	e014      	b.n	8004bca <_vfiprintf_r+0x156>
 8004ba0:	eba0 0308 	sub.w	r3, r0, r8
 8004ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	9304      	str	r3, [sp, #16]
 8004bac:	46a2      	mov	sl, r4
 8004bae:	e7d2      	b.n	8004b56 <_vfiprintf_r+0xe2>
 8004bb0:	9b03      	ldr	r3, [sp, #12]
 8004bb2:	1d19      	adds	r1, r3, #4
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	9103      	str	r1, [sp, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bfbb      	ittet	lt
 8004bbc:	425b      	neglt	r3, r3
 8004bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8004bc2:	9307      	strge	r3, [sp, #28]
 8004bc4:	9307      	strlt	r3, [sp, #28]
 8004bc6:	bfb8      	it	lt
 8004bc8:	9204      	strlt	r2, [sp, #16]
 8004bca:	7823      	ldrb	r3, [r4, #0]
 8004bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8004bce:	d10c      	bne.n	8004bea <_vfiprintf_r+0x176>
 8004bd0:	7863      	ldrb	r3, [r4, #1]
 8004bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd4:	d135      	bne.n	8004c42 <_vfiprintf_r+0x1ce>
 8004bd6:	9b03      	ldr	r3, [sp, #12]
 8004bd8:	1d1a      	adds	r2, r3, #4
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	9203      	str	r2, [sp, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bfb8      	it	lt
 8004be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004be6:	3402      	adds	r4, #2
 8004be8:	9305      	str	r3, [sp, #20]
 8004bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004cd0 <_vfiprintf_r+0x25c>
 8004bee:	7821      	ldrb	r1, [r4, #0]
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	4650      	mov	r0, sl
 8004bf4:	f7fb fb0c 	bl	8000210 <memchr>
 8004bf8:	b140      	cbz	r0, 8004c0c <_vfiprintf_r+0x198>
 8004bfa:	2340      	movs	r3, #64	; 0x40
 8004bfc:	eba0 000a 	sub.w	r0, r0, sl
 8004c00:	fa03 f000 	lsl.w	r0, r3, r0
 8004c04:	9b04      	ldr	r3, [sp, #16]
 8004c06:	4303      	orrs	r3, r0
 8004c08:	3401      	adds	r4, #1
 8004c0a:	9304      	str	r3, [sp, #16]
 8004c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c10:	482c      	ldr	r0, [pc, #176]	; (8004cc4 <_vfiprintf_r+0x250>)
 8004c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c16:	2206      	movs	r2, #6
 8004c18:	f7fb fafa 	bl	8000210 <memchr>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d03f      	beq.n	8004ca0 <_vfiprintf_r+0x22c>
 8004c20:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <_vfiprintf_r+0x254>)
 8004c22:	bb1b      	cbnz	r3, 8004c6c <_vfiprintf_r+0x1f8>
 8004c24:	9b03      	ldr	r3, [sp, #12]
 8004c26:	3307      	adds	r3, #7
 8004c28:	f023 0307 	bic.w	r3, r3, #7
 8004c2c:	3308      	adds	r3, #8
 8004c2e:	9303      	str	r3, [sp, #12]
 8004c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c32:	443b      	add	r3, r7
 8004c34:	9309      	str	r3, [sp, #36]	; 0x24
 8004c36:	e767      	b.n	8004b08 <_vfiprintf_r+0x94>
 8004c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	2001      	movs	r0, #1
 8004c40:	e7a5      	b.n	8004b8e <_vfiprintf_r+0x11a>
 8004c42:	2300      	movs	r3, #0
 8004c44:	3401      	adds	r4, #1
 8004c46:	9305      	str	r3, [sp, #20]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	f04f 0c0a 	mov.w	ip, #10
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c54:	3a30      	subs	r2, #48	; 0x30
 8004c56:	2a09      	cmp	r2, #9
 8004c58:	d903      	bls.n	8004c62 <_vfiprintf_r+0x1ee>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0c5      	beq.n	8004bea <_vfiprintf_r+0x176>
 8004c5e:	9105      	str	r1, [sp, #20]
 8004c60:	e7c3      	b.n	8004bea <_vfiprintf_r+0x176>
 8004c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c66:	4604      	mov	r4, r0
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e7f0      	b.n	8004c4e <_vfiprintf_r+0x1da>
 8004c6c:	ab03      	add	r3, sp, #12
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	462a      	mov	r2, r5
 8004c72:	4b16      	ldr	r3, [pc, #88]	; (8004ccc <_vfiprintf_r+0x258>)
 8004c74:	a904      	add	r1, sp, #16
 8004c76:	4630      	mov	r0, r6
 8004c78:	f3af 8000 	nop.w
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	1c78      	adds	r0, r7, #1
 8004c80:	d1d6      	bne.n	8004c30 <_vfiprintf_r+0x1bc>
 8004c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c84:	07d9      	lsls	r1, r3, #31
 8004c86:	d405      	bmi.n	8004c94 <_vfiprintf_r+0x220>
 8004c88:	89ab      	ldrh	r3, [r5, #12]
 8004c8a:	059a      	lsls	r2, r3, #22
 8004c8c:	d402      	bmi.n	8004c94 <_vfiprintf_r+0x220>
 8004c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c90:	f7ff fe31 	bl	80048f6 <__retarget_lock_release_recursive>
 8004c94:	89ab      	ldrh	r3, [r5, #12]
 8004c96:	065b      	lsls	r3, r3, #25
 8004c98:	f53f af12 	bmi.w	8004ac0 <_vfiprintf_r+0x4c>
 8004c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c9e:	e711      	b.n	8004ac4 <_vfiprintf_r+0x50>
 8004ca0:	ab03      	add	r3, sp, #12
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	462a      	mov	r2, r5
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <_vfiprintf_r+0x258>)
 8004ca8:	a904      	add	r1, sp, #16
 8004caa:	4630      	mov	r0, r6
 8004cac:	f000 f880 	bl	8004db0 <_printf_i>
 8004cb0:	e7e4      	b.n	8004c7c <_vfiprintf_r+0x208>
 8004cb2:	bf00      	nop
 8004cb4:	08005650 	.word	0x08005650
 8004cb8:	08005670 	.word	0x08005670
 8004cbc:	08005630 	.word	0x08005630
 8004cc0:	08005690 	.word	0x08005690
 8004cc4:	0800569a 	.word	0x0800569a
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	08004a4f 	.word	0x08004a4f
 8004cd0:	08005696 	.word	0x08005696

08004cd4 <_printf_common>:
 8004cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	4616      	mov	r6, r2
 8004cda:	4699      	mov	r9, r3
 8004cdc:	688a      	ldr	r2, [r1, #8]
 8004cde:	690b      	ldr	r3, [r1, #16]
 8004ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	bfb8      	it	lt
 8004ce8:	4613      	movlt	r3, r2
 8004cea:	6033      	str	r3, [r6, #0]
 8004cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cf0:	4607      	mov	r7, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	b10a      	cbz	r2, 8004cfa <_printf_common+0x26>
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	6033      	str	r3, [r6, #0]
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	0699      	lsls	r1, r3, #26
 8004cfe:	bf42      	ittt	mi
 8004d00:	6833      	ldrmi	r3, [r6, #0]
 8004d02:	3302      	addmi	r3, #2
 8004d04:	6033      	strmi	r3, [r6, #0]
 8004d06:	6825      	ldr	r5, [r4, #0]
 8004d08:	f015 0506 	ands.w	r5, r5, #6
 8004d0c:	d106      	bne.n	8004d1c <_printf_common+0x48>
 8004d0e:	f104 0a19 	add.w	sl, r4, #25
 8004d12:	68e3      	ldr	r3, [r4, #12]
 8004d14:	6832      	ldr	r2, [r6, #0]
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	42ab      	cmp	r3, r5
 8004d1a:	dc26      	bgt.n	8004d6a <_printf_common+0x96>
 8004d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d20:	1e13      	subs	r3, r2, #0
 8004d22:	6822      	ldr	r2, [r4, #0]
 8004d24:	bf18      	it	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	0692      	lsls	r2, r2, #26
 8004d2a:	d42b      	bmi.n	8004d84 <_printf_common+0xb0>
 8004d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d30:	4649      	mov	r1, r9
 8004d32:	4638      	mov	r0, r7
 8004d34:	47c0      	blx	r8
 8004d36:	3001      	adds	r0, #1
 8004d38:	d01e      	beq.n	8004d78 <_printf_common+0xa4>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	68e5      	ldr	r5, [r4, #12]
 8004d3e:	6832      	ldr	r2, [r6, #0]
 8004d40:	f003 0306 	and.w	r3, r3, #6
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	bf08      	it	eq
 8004d48:	1aad      	subeq	r5, r5, r2
 8004d4a:	68a3      	ldr	r3, [r4, #8]
 8004d4c:	6922      	ldr	r2, [r4, #16]
 8004d4e:	bf0c      	ite	eq
 8004d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d54:	2500      	movne	r5, #0
 8004d56:	4293      	cmp	r3, r2
 8004d58:	bfc4      	itt	gt
 8004d5a:	1a9b      	subgt	r3, r3, r2
 8004d5c:	18ed      	addgt	r5, r5, r3
 8004d5e:	2600      	movs	r6, #0
 8004d60:	341a      	adds	r4, #26
 8004d62:	42b5      	cmp	r5, r6
 8004d64:	d11a      	bne.n	8004d9c <_printf_common+0xc8>
 8004d66:	2000      	movs	r0, #0
 8004d68:	e008      	b.n	8004d7c <_printf_common+0xa8>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	4652      	mov	r2, sl
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4638      	mov	r0, r7
 8004d72:	47c0      	blx	r8
 8004d74:	3001      	adds	r0, #1
 8004d76:	d103      	bne.n	8004d80 <_printf_common+0xac>
 8004d78:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d80:	3501      	adds	r5, #1
 8004d82:	e7c6      	b.n	8004d12 <_printf_common+0x3e>
 8004d84:	18e1      	adds	r1, r4, r3
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	2030      	movs	r0, #48	; 0x30
 8004d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d8e:	4422      	add	r2, r4
 8004d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d98:	3302      	adds	r3, #2
 8004d9a:	e7c7      	b.n	8004d2c <_printf_common+0x58>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4622      	mov	r2, r4
 8004da0:	4649      	mov	r1, r9
 8004da2:	4638      	mov	r0, r7
 8004da4:	47c0      	blx	r8
 8004da6:	3001      	adds	r0, #1
 8004da8:	d0e6      	beq.n	8004d78 <_printf_common+0xa4>
 8004daa:	3601      	adds	r6, #1
 8004dac:	e7d9      	b.n	8004d62 <_printf_common+0x8e>
	...

08004db0 <_printf_i>:
 8004db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004db4:	7e0f      	ldrb	r7, [r1, #24]
 8004db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004db8:	2f78      	cmp	r7, #120	; 0x78
 8004dba:	4691      	mov	r9, r2
 8004dbc:	4680      	mov	r8, r0
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	469a      	mov	sl, r3
 8004dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dc6:	d807      	bhi.n	8004dd8 <_printf_i+0x28>
 8004dc8:	2f62      	cmp	r7, #98	; 0x62
 8004dca:	d80a      	bhi.n	8004de2 <_printf_i+0x32>
 8004dcc:	2f00      	cmp	r7, #0
 8004dce:	f000 80d8 	beq.w	8004f82 <_printf_i+0x1d2>
 8004dd2:	2f58      	cmp	r7, #88	; 0x58
 8004dd4:	f000 80a3 	beq.w	8004f1e <_printf_i+0x16e>
 8004dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004de0:	e03a      	b.n	8004e58 <_printf_i+0xa8>
 8004de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004de6:	2b15      	cmp	r3, #21
 8004de8:	d8f6      	bhi.n	8004dd8 <_printf_i+0x28>
 8004dea:	a101      	add	r1, pc, #4	; (adr r1, 8004df0 <_printf_i+0x40>)
 8004dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004df0:	08004e49 	.word	0x08004e49
 8004df4:	08004e5d 	.word	0x08004e5d
 8004df8:	08004dd9 	.word	0x08004dd9
 8004dfc:	08004dd9 	.word	0x08004dd9
 8004e00:	08004dd9 	.word	0x08004dd9
 8004e04:	08004dd9 	.word	0x08004dd9
 8004e08:	08004e5d 	.word	0x08004e5d
 8004e0c:	08004dd9 	.word	0x08004dd9
 8004e10:	08004dd9 	.word	0x08004dd9
 8004e14:	08004dd9 	.word	0x08004dd9
 8004e18:	08004dd9 	.word	0x08004dd9
 8004e1c:	08004f69 	.word	0x08004f69
 8004e20:	08004e8d 	.word	0x08004e8d
 8004e24:	08004f4b 	.word	0x08004f4b
 8004e28:	08004dd9 	.word	0x08004dd9
 8004e2c:	08004dd9 	.word	0x08004dd9
 8004e30:	08004f8b 	.word	0x08004f8b
 8004e34:	08004dd9 	.word	0x08004dd9
 8004e38:	08004e8d 	.word	0x08004e8d
 8004e3c:	08004dd9 	.word	0x08004dd9
 8004e40:	08004dd9 	.word	0x08004dd9
 8004e44:	08004f53 	.word	0x08004f53
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	1d1a      	adds	r2, r3, #4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	602a      	str	r2, [r5, #0]
 8004e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0a3      	b.n	8004fa4 <_printf_i+0x1f4>
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	6829      	ldr	r1, [r5, #0]
 8004e60:	0606      	lsls	r6, r0, #24
 8004e62:	f101 0304 	add.w	r3, r1, #4
 8004e66:	d50a      	bpl.n	8004e7e <_printf_i+0xce>
 8004e68:	680e      	ldr	r6, [r1, #0]
 8004e6a:	602b      	str	r3, [r5, #0]
 8004e6c:	2e00      	cmp	r6, #0
 8004e6e:	da03      	bge.n	8004e78 <_printf_i+0xc8>
 8004e70:	232d      	movs	r3, #45	; 0x2d
 8004e72:	4276      	negs	r6, r6
 8004e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e78:	485e      	ldr	r0, [pc, #376]	; (8004ff4 <_printf_i+0x244>)
 8004e7a:	230a      	movs	r3, #10
 8004e7c:	e019      	b.n	8004eb2 <_printf_i+0x102>
 8004e7e:	680e      	ldr	r6, [r1, #0]
 8004e80:	602b      	str	r3, [r5, #0]
 8004e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e86:	bf18      	it	ne
 8004e88:	b236      	sxthne	r6, r6
 8004e8a:	e7ef      	b.n	8004e6c <_printf_i+0xbc>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	6820      	ldr	r0, [r4, #0]
 8004e90:	1d19      	adds	r1, r3, #4
 8004e92:	6029      	str	r1, [r5, #0]
 8004e94:	0601      	lsls	r1, r0, #24
 8004e96:	d501      	bpl.n	8004e9c <_printf_i+0xec>
 8004e98:	681e      	ldr	r6, [r3, #0]
 8004e9a:	e002      	b.n	8004ea2 <_printf_i+0xf2>
 8004e9c:	0646      	lsls	r6, r0, #25
 8004e9e:	d5fb      	bpl.n	8004e98 <_printf_i+0xe8>
 8004ea0:	881e      	ldrh	r6, [r3, #0]
 8004ea2:	4854      	ldr	r0, [pc, #336]	; (8004ff4 <_printf_i+0x244>)
 8004ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2308      	moveq	r3, #8
 8004eaa:	230a      	movne	r3, #10
 8004eac:	2100      	movs	r1, #0
 8004eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eb2:	6865      	ldr	r5, [r4, #4]
 8004eb4:	60a5      	str	r5, [r4, #8]
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	bfa2      	ittt	ge
 8004eba:	6821      	ldrge	r1, [r4, #0]
 8004ebc:	f021 0104 	bicge.w	r1, r1, #4
 8004ec0:	6021      	strge	r1, [r4, #0]
 8004ec2:	b90e      	cbnz	r6, 8004ec8 <_printf_i+0x118>
 8004ec4:	2d00      	cmp	r5, #0
 8004ec6:	d04d      	beq.n	8004f64 <_printf_i+0x1b4>
 8004ec8:	4615      	mov	r5, r2
 8004eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ece:	fb03 6711 	mls	r7, r3, r1, r6
 8004ed2:	5dc7      	ldrb	r7, [r0, r7]
 8004ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ed8:	4637      	mov	r7, r6
 8004eda:	42bb      	cmp	r3, r7
 8004edc:	460e      	mov	r6, r1
 8004ede:	d9f4      	bls.n	8004eca <_printf_i+0x11a>
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d10b      	bne.n	8004efc <_printf_i+0x14c>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	07de      	lsls	r6, r3, #31
 8004ee8:	d508      	bpl.n	8004efc <_printf_i+0x14c>
 8004eea:	6923      	ldr	r3, [r4, #16]
 8004eec:	6861      	ldr	r1, [r4, #4]
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	bfde      	ittt	le
 8004ef2:	2330      	movle	r3, #48	; 0x30
 8004ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004efc:	1b52      	subs	r2, r2, r5
 8004efe:	6122      	str	r2, [r4, #16]
 8004f00:	f8cd a000 	str.w	sl, [sp]
 8004f04:	464b      	mov	r3, r9
 8004f06:	aa03      	add	r2, sp, #12
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	f7ff fee2 	bl	8004cd4 <_printf_common>
 8004f10:	3001      	adds	r0, #1
 8004f12:	d14c      	bne.n	8004fae <_printf_i+0x1fe>
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	b004      	add	sp, #16
 8004f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1e:	4835      	ldr	r0, [pc, #212]	; (8004ff4 <_printf_i+0x244>)
 8004f20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f24:	6829      	ldr	r1, [r5, #0]
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f2c:	6029      	str	r1, [r5, #0]
 8004f2e:	061d      	lsls	r5, r3, #24
 8004f30:	d514      	bpl.n	8004f5c <_printf_i+0x1ac>
 8004f32:	07df      	lsls	r7, r3, #31
 8004f34:	bf44      	itt	mi
 8004f36:	f043 0320 	orrmi.w	r3, r3, #32
 8004f3a:	6023      	strmi	r3, [r4, #0]
 8004f3c:	b91e      	cbnz	r6, 8004f46 <_printf_i+0x196>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	f023 0320 	bic.w	r3, r3, #32
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	2310      	movs	r3, #16
 8004f48:	e7b0      	b.n	8004eac <_printf_i+0xfc>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	f043 0320 	orr.w	r3, r3, #32
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	2378      	movs	r3, #120	; 0x78
 8004f54:	4828      	ldr	r0, [pc, #160]	; (8004ff8 <_printf_i+0x248>)
 8004f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f5a:	e7e3      	b.n	8004f24 <_printf_i+0x174>
 8004f5c:	0659      	lsls	r1, r3, #25
 8004f5e:	bf48      	it	mi
 8004f60:	b2b6      	uxthmi	r6, r6
 8004f62:	e7e6      	b.n	8004f32 <_printf_i+0x182>
 8004f64:	4615      	mov	r5, r2
 8004f66:	e7bb      	b.n	8004ee0 <_printf_i+0x130>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	6826      	ldr	r6, [r4, #0]
 8004f6c:	6961      	ldr	r1, [r4, #20]
 8004f6e:	1d18      	adds	r0, r3, #4
 8004f70:	6028      	str	r0, [r5, #0]
 8004f72:	0635      	lsls	r5, r6, #24
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	d501      	bpl.n	8004f7c <_printf_i+0x1cc>
 8004f78:	6019      	str	r1, [r3, #0]
 8004f7a:	e002      	b.n	8004f82 <_printf_i+0x1d2>
 8004f7c:	0670      	lsls	r0, r6, #25
 8004f7e:	d5fb      	bpl.n	8004f78 <_printf_i+0x1c8>
 8004f80:	8019      	strh	r1, [r3, #0]
 8004f82:	2300      	movs	r3, #0
 8004f84:	6123      	str	r3, [r4, #16]
 8004f86:	4615      	mov	r5, r2
 8004f88:	e7ba      	b.n	8004f00 <_printf_i+0x150>
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	1d1a      	adds	r2, r3, #4
 8004f8e:	602a      	str	r2, [r5, #0]
 8004f90:	681d      	ldr	r5, [r3, #0]
 8004f92:	6862      	ldr	r2, [r4, #4]
 8004f94:	2100      	movs	r1, #0
 8004f96:	4628      	mov	r0, r5
 8004f98:	f7fb f93a 	bl	8000210 <memchr>
 8004f9c:	b108      	cbz	r0, 8004fa2 <_printf_i+0x1f2>
 8004f9e:	1b40      	subs	r0, r0, r5
 8004fa0:	6060      	str	r0, [r4, #4]
 8004fa2:	6863      	ldr	r3, [r4, #4]
 8004fa4:	6123      	str	r3, [r4, #16]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fac:	e7a8      	b.n	8004f00 <_printf_i+0x150>
 8004fae:	6923      	ldr	r3, [r4, #16]
 8004fb0:	462a      	mov	r2, r5
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	47d0      	blx	sl
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d0ab      	beq.n	8004f14 <_printf_i+0x164>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	079b      	lsls	r3, r3, #30
 8004fc0:	d413      	bmi.n	8004fea <_printf_i+0x23a>
 8004fc2:	68e0      	ldr	r0, [r4, #12]
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	4298      	cmp	r0, r3
 8004fc8:	bfb8      	it	lt
 8004fca:	4618      	movlt	r0, r3
 8004fcc:	e7a4      	b.n	8004f18 <_printf_i+0x168>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	47d0      	blx	sl
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d09b      	beq.n	8004f14 <_printf_i+0x164>
 8004fdc:	3501      	adds	r5, #1
 8004fde:	68e3      	ldr	r3, [r4, #12]
 8004fe0:	9903      	ldr	r1, [sp, #12]
 8004fe2:	1a5b      	subs	r3, r3, r1
 8004fe4:	42ab      	cmp	r3, r5
 8004fe6:	dcf2      	bgt.n	8004fce <_printf_i+0x21e>
 8004fe8:	e7eb      	b.n	8004fc2 <_printf_i+0x212>
 8004fea:	2500      	movs	r5, #0
 8004fec:	f104 0619 	add.w	r6, r4, #25
 8004ff0:	e7f5      	b.n	8004fde <_printf_i+0x22e>
 8004ff2:	bf00      	nop
 8004ff4:	080056a1 	.word	0x080056a1
 8004ff8:	080056b2 	.word	0x080056b2

08004ffc <_sbrk_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d06      	ldr	r5, [pc, #24]	; (8005018 <_sbrk_r+0x1c>)
 8005000:	2300      	movs	r3, #0
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	f7fc faa2 	bl	8001550 <_sbrk>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_sbrk_r+0x1a>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_sbrk_r+0x1a>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	2000013c 	.word	0x2000013c

0800501c <__sread>:
 800501c:	b510      	push	{r4, lr}
 800501e:	460c      	mov	r4, r1
 8005020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005024:	f000 fab2 	bl	800558c <_read_r>
 8005028:	2800      	cmp	r0, #0
 800502a:	bfab      	itete	ge
 800502c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800502e:	89a3      	ldrhlt	r3, [r4, #12]
 8005030:	181b      	addge	r3, r3, r0
 8005032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005036:	bfac      	ite	ge
 8005038:	6563      	strge	r3, [r4, #84]	; 0x54
 800503a:	81a3      	strhlt	r3, [r4, #12]
 800503c:	bd10      	pop	{r4, pc}

0800503e <__swrite>:
 800503e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005042:	461f      	mov	r7, r3
 8005044:	898b      	ldrh	r3, [r1, #12]
 8005046:	05db      	lsls	r3, r3, #23
 8005048:	4605      	mov	r5, r0
 800504a:	460c      	mov	r4, r1
 800504c:	4616      	mov	r6, r2
 800504e:	d505      	bpl.n	800505c <__swrite+0x1e>
 8005050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005054:	2302      	movs	r3, #2
 8005056:	2200      	movs	r2, #0
 8005058:	f000 f9c8 	bl	80053ec <_lseek_r>
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005066:	81a3      	strh	r3, [r4, #12]
 8005068:	4632      	mov	r2, r6
 800506a:	463b      	mov	r3, r7
 800506c:	4628      	mov	r0, r5
 800506e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005072:	f000 b869 	b.w	8005148 <_write_r>

08005076 <__sseek>:
 8005076:	b510      	push	{r4, lr}
 8005078:	460c      	mov	r4, r1
 800507a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507e:	f000 f9b5 	bl	80053ec <_lseek_r>
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	bf15      	itete	ne
 8005088:	6560      	strne	r0, [r4, #84]	; 0x54
 800508a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800508e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005092:	81a3      	strheq	r3, [r4, #12]
 8005094:	bf18      	it	ne
 8005096:	81a3      	strhne	r3, [r4, #12]
 8005098:	bd10      	pop	{r4, pc}

0800509a <__sclose>:
 800509a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509e:	f000 b8d3 	b.w	8005248 <_close_r>
	...

080050a4 <__swbuf_r>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	460e      	mov	r6, r1
 80050a8:	4614      	mov	r4, r2
 80050aa:	4605      	mov	r5, r0
 80050ac:	b118      	cbz	r0, 80050b6 <__swbuf_r+0x12>
 80050ae:	6983      	ldr	r3, [r0, #24]
 80050b0:	b90b      	cbnz	r3, 80050b6 <__swbuf_r+0x12>
 80050b2:	f7ff fb81 	bl	80047b8 <__sinit>
 80050b6:	4b21      	ldr	r3, [pc, #132]	; (800513c <__swbuf_r+0x98>)
 80050b8:	429c      	cmp	r4, r3
 80050ba:	d12b      	bne.n	8005114 <__swbuf_r+0x70>
 80050bc:	686c      	ldr	r4, [r5, #4]
 80050be:	69a3      	ldr	r3, [r4, #24]
 80050c0:	60a3      	str	r3, [r4, #8]
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	071a      	lsls	r2, r3, #28
 80050c6:	d52f      	bpl.n	8005128 <__swbuf_r+0x84>
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	b36b      	cbz	r3, 8005128 <__swbuf_r+0x84>
 80050cc:	6923      	ldr	r3, [r4, #16]
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	1ac0      	subs	r0, r0, r3
 80050d2:	6963      	ldr	r3, [r4, #20]
 80050d4:	b2f6      	uxtb	r6, r6
 80050d6:	4283      	cmp	r3, r0
 80050d8:	4637      	mov	r7, r6
 80050da:	dc04      	bgt.n	80050e6 <__swbuf_r+0x42>
 80050dc:	4621      	mov	r1, r4
 80050de:	4628      	mov	r0, r5
 80050e0:	f000 f948 	bl	8005374 <_fflush_r>
 80050e4:	bb30      	cbnz	r0, 8005134 <__swbuf_r+0x90>
 80050e6:	68a3      	ldr	r3, [r4, #8]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	60a3      	str	r3, [r4, #8]
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	6022      	str	r2, [r4, #0]
 80050f2:	701e      	strb	r6, [r3, #0]
 80050f4:	6963      	ldr	r3, [r4, #20]
 80050f6:	3001      	adds	r0, #1
 80050f8:	4283      	cmp	r3, r0
 80050fa:	d004      	beq.n	8005106 <__swbuf_r+0x62>
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	07db      	lsls	r3, r3, #31
 8005100:	d506      	bpl.n	8005110 <__swbuf_r+0x6c>
 8005102:	2e0a      	cmp	r6, #10
 8005104:	d104      	bne.n	8005110 <__swbuf_r+0x6c>
 8005106:	4621      	mov	r1, r4
 8005108:	4628      	mov	r0, r5
 800510a:	f000 f933 	bl	8005374 <_fflush_r>
 800510e:	b988      	cbnz	r0, 8005134 <__swbuf_r+0x90>
 8005110:	4638      	mov	r0, r7
 8005112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <__swbuf_r+0x9c>)
 8005116:	429c      	cmp	r4, r3
 8005118:	d101      	bne.n	800511e <__swbuf_r+0x7a>
 800511a:	68ac      	ldr	r4, [r5, #8]
 800511c:	e7cf      	b.n	80050be <__swbuf_r+0x1a>
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <__swbuf_r+0xa0>)
 8005120:	429c      	cmp	r4, r3
 8005122:	bf08      	it	eq
 8005124:	68ec      	ldreq	r4, [r5, #12]
 8005126:	e7ca      	b.n	80050be <__swbuf_r+0x1a>
 8005128:	4621      	mov	r1, r4
 800512a:	4628      	mov	r0, r5
 800512c:	f000 f81e 	bl	800516c <__swsetup_r>
 8005130:	2800      	cmp	r0, #0
 8005132:	d0cb      	beq.n	80050cc <__swbuf_r+0x28>
 8005134:	f04f 37ff 	mov.w	r7, #4294967295
 8005138:	e7ea      	b.n	8005110 <__swbuf_r+0x6c>
 800513a:	bf00      	nop
 800513c:	08005650 	.word	0x08005650
 8005140:	08005670 	.word	0x08005670
 8005144:	08005630 	.word	0x08005630

08005148 <_write_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d07      	ldr	r5, [pc, #28]	; (8005168 <_write_r+0x20>)
 800514c:	4604      	mov	r4, r0
 800514e:	4608      	mov	r0, r1
 8005150:	4611      	mov	r1, r2
 8005152:	2200      	movs	r2, #0
 8005154:	602a      	str	r2, [r5, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	f7fc f9a9 	bl	80014ae <_write>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d102      	bne.n	8005166 <_write_r+0x1e>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	b103      	cbz	r3, 8005166 <_write_r+0x1e>
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	bd38      	pop	{r3, r4, r5, pc}
 8005168:	2000013c 	.word	0x2000013c

0800516c <__swsetup_r>:
 800516c:	4b32      	ldr	r3, [pc, #200]	; (8005238 <__swsetup_r+0xcc>)
 800516e:	b570      	push	{r4, r5, r6, lr}
 8005170:	681d      	ldr	r5, [r3, #0]
 8005172:	4606      	mov	r6, r0
 8005174:	460c      	mov	r4, r1
 8005176:	b125      	cbz	r5, 8005182 <__swsetup_r+0x16>
 8005178:	69ab      	ldr	r3, [r5, #24]
 800517a:	b913      	cbnz	r3, 8005182 <__swsetup_r+0x16>
 800517c:	4628      	mov	r0, r5
 800517e:	f7ff fb1b 	bl	80047b8 <__sinit>
 8005182:	4b2e      	ldr	r3, [pc, #184]	; (800523c <__swsetup_r+0xd0>)
 8005184:	429c      	cmp	r4, r3
 8005186:	d10f      	bne.n	80051a8 <__swsetup_r+0x3c>
 8005188:	686c      	ldr	r4, [r5, #4]
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005190:	0719      	lsls	r1, r3, #28
 8005192:	d42c      	bmi.n	80051ee <__swsetup_r+0x82>
 8005194:	06dd      	lsls	r5, r3, #27
 8005196:	d411      	bmi.n	80051bc <__swsetup_r+0x50>
 8005198:	2309      	movs	r3, #9
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051a0:	81a3      	strh	r3, [r4, #12]
 80051a2:	f04f 30ff 	mov.w	r0, #4294967295
 80051a6:	e03e      	b.n	8005226 <__swsetup_r+0xba>
 80051a8:	4b25      	ldr	r3, [pc, #148]	; (8005240 <__swsetup_r+0xd4>)
 80051aa:	429c      	cmp	r4, r3
 80051ac:	d101      	bne.n	80051b2 <__swsetup_r+0x46>
 80051ae:	68ac      	ldr	r4, [r5, #8]
 80051b0:	e7eb      	b.n	800518a <__swsetup_r+0x1e>
 80051b2:	4b24      	ldr	r3, [pc, #144]	; (8005244 <__swsetup_r+0xd8>)
 80051b4:	429c      	cmp	r4, r3
 80051b6:	bf08      	it	eq
 80051b8:	68ec      	ldreq	r4, [r5, #12]
 80051ba:	e7e6      	b.n	800518a <__swsetup_r+0x1e>
 80051bc:	0758      	lsls	r0, r3, #29
 80051be:	d512      	bpl.n	80051e6 <__swsetup_r+0x7a>
 80051c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051c2:	b141      	cbz	r1, 80051d6 <__swsetup_r+0x6a>
 80051c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051c8:	4299      	cmp	r1, r3
 80051ca:	d002      	beq.n	80051d2 <__swsetup_r+0x66>
 80051cc:	4630      	mov	r0, r6
 80051ce:	f000 f991 	bl	80054f4 <_free_r>
 80051d2:	2300      	movs	r3, #0
 80051d4:	6363      	str	r3, [r4, #52]	; 0x34
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	2300      	movs	r3, #0
 80051e0:	6063      	str	r3, [r4, #4]
 80051e2:	6923      	ldr	r3, [r4, #16]
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	f043 0308 	orr.w	r3, r3, #8
 80051ec:	81a3      	strh	r3, [r4, #12]
 80051ee:	6923      	ldr	r3, [r4, #16]
 80051f0:	b94b      	cbnz	r3, 8005206 <__swsetup_r+0x9a>
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fc:	d003      	beq.n	8005206 <__swsetup_r+0x9a>
 80051fe:	4621      	mov	r1, r4
 8005200:	4630      	mov	r0, r6
 8005202:	f000 f92b 	bl	800545c <__smakebuf_r>
 8005206:	89a0      	ldrh	r0, [r4, #12]
 8005208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800520c:	f010 0301 	ands.w	r3, r0, #1
 8005210:	d00a      	beq.n	8005228 <__swsetup_r+0xbc>
 8005212:	2300      	movs	r3, #0
 8005214:	60a3      	str	r3, [r4, #8]
 8005216:	6963      	ldr	r3, [r4, #20]
 8005218:	425b      	negs	r3, r3
 800521a:	61a3      	str	r3, [r4, #24]
 800521c:	6923      	ldr	r3, [r4, #16]
 800521e:	b943      	cbnz	r3, 8005232 <__swsetup_r+0xc6>
 8005220:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005224:	d1ba      	bne.n	800519c <__swsetup_r+0x30>
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	0781      	lsls	r1, r0, #30
 800522a:	bf58      	it	pl
 800522c:	6963      	ldrpl	r3, [r4, #20]
 800522e:	60a3      	str	r3, [r4, #8]
 8005230:	e7f4      	b.n	800521c <__swsetup_r+0xb0>
 8005232:	2000      	movs	r0, #0
 8005234:	e7f7      	b.n	8005226 <__swsetup_r+0xba>
 8005236:	bf00      	nop
 8005238:	2000000c 	.word	0x2000000c
 800523c:	08005650 	.word	0x08005650
 8005240:	08005670 	.word	0x08005670
 8005244:	08005630 	.word	0x08005630

08005248 <_close_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d06      	ldr	r5, [pc, #24]	; (8005264 <_close_r+0x1c>)
 800524c:	2300      	movs	r3, #0
 800524e:	4604      	mov	r4, r0
 8005250:	4608      	mov	r0, r1
 8005252:	602b      	str	r3, [r5, #0]
 8005254:	f7fc f947 	bl	80014e6 <_close>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_close_r+0x1a>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_close_r+0x1a>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	2000013c 	.word	0x2000013c

08005268 <__sflush_r>:
 8005268:	898a      	ldrh	r2, [r1, #12]
 800526a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526e:	4605      	mov	r5, r0
 8005270:	0710      	lsls	r0, r2, #28
 8005272:	460c      	mov	r4, r1
 8005274:	d458      	bmi.n	8005328 <__sflush_r+0xc0>
 8005276:	684b      	ldr	r3, [r1, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	dc05      	bgt.n	8005288 <__sflush_r+0x20>
 800527c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	dc02      	bgt.n	8005288 <__sflush_r+0x20>
 8005282:	2000      	movs	r0, #0
 8005284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800528a:	2e00      	cmp	r6, #0
 800528c:	d0f9      	beq.n	8005282 <__sflush_r+0x1a>
 800528e:	2300      	movs	r3, #0
 8005290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005294:	682f      	ldr	r7, [r5, #0]
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	d032      	beq.n	8005300 <__sflush_r+0x98>
 800529a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	075a      	lsls	r2, r3, #29
 80052a0:	d505      	bpl.n	80052ae <__sflush_r+0x46>
 80052a2:	6863      	ldr	r3, [r4, #4]
 80052a4:	1ac0      	subs	r0, r0, r3
 80052a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052a8:	b10b      	cbz	r3, 80052ae <__sflush_r+0x46>
 80052aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052ac:	1ac0      	subs	r0, r0, r3
 80052ae:	2300      	movs	r3, #0
 80052b0:	4602      	mov	r2, r0
 80052b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052b4:	6a21      	ldr	r1, [r4, #32]
 80052b6:	4628      	mov	r0, r5
 80052b8:	47b0      	blx	r6
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	d106      	bne.n	80052ce <__sflush_r+0x66>
 80052c0:	6829      	ldr	r1, [r5, #0]
 80052c2:	291d      	cmp	r1, #29
 80052c4:	d82c      	bhi.n	8005320 <__sflush_r+0xb8>
 80052c6:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <__sflush_r+0x108>)
 80052c8:	40ca      	lsrs	r2, r1
 80052ca:	07d6      	lsls	r6, r2, #31
 80052cc:	d528      	bpl.n	8005320 <__sflush_r+0xb8>
 80052ce:	2200      	movs	r2, #0
 80052d0:	6062      	str	r2, [r4, #4]
 80052d2:	04d9      	lsls	r1, r3, #19
 80052d4:	6922      	ldr	r2, [r4, #16]
 80052d6:	6022      	str	r2, [r4, #0]
 80052d8:	d504      	bpl.n	80052e4 <__sflush_r+0x7c>
 80052da:	1c42      	adds	r2, r0, #1
 80052dc:	d101      	bne.n	80052e2 <__sflush_r+0x7a>
 80052de:	682b      	ldr	r3, [r5, #0]
 80052e0:	b903      	cbnz	r3, 80052e4 <__sflush_r+0x7c>
 80052e2:	6560      	str	r0, [r4, #84]	; 0x54
 80052e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052e6:	602f      	str	r7, [r5, #0]
 80052e8:	2900      	cmp	r1, #0
 80052ea:	d0ca      	beq.n	8005282 <__sflush_r+0x1a>
 80052ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052f0:	4299      	cmp	r1, r3
 80052f2:	d002      	beq.n	80052fa <__sflush_r+0x92>
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 f8fd 	bl	80054f4 <_free_r>
 80052fa:	2000      	movs	r0, #0
 80052fc:	6360      	str	r0, [r4, #52]	; 0x34
 80052fe:	e7c1      	b.n	8005284 <__sflush_r+0x1c>
 8005300:	6a21      	ldr	r1, [r4, #32]
 8005302:	2301      	movs	r3, #1
 8005304:	4628      	mov	r0, r5
 8005306:	47b0      	blx	r6
 8005308:	1c41      	adds	r1, r0, #1
 800530a:	d1c7      	bne.n	800529c <__sflush_r+0x34>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0c4      	beq.n	800529c <__sflush_r+0x34>
 8005312:	2b1d      	cmp	r3, #29
 8005314:	d001      	beq.n	800531a <__sflush_r+0xb2>
 8005316:	2b16      	cmp	r3, #22
 8005318:	d101      	bne.n	800531e <__sflush_r+0xb6>
 800531a:	602f      	str	r7, [r5, #0]
 800531c:	e7b1      	b.n	8005282 <__sflush_r+0x1a>
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005324:	81a3      	strh	r3, [r4, #12]
 8005326:	e7ad      	b.n	8005284 <__sflush_r+0x1c>
 8005328:	690f      	ldr	r7, [r1, #16]
 800532a:	2f00      	cmp	r7, #0
 800532c:	d0a9      	beq.n	8005282 <__sflush_r+0x1a>
 800532e:	0793      	lsls	r3, r2, #30
 8005330:	680e      	ldr	r6, [r1, #0]
 8005332:	bf08      	it	eq
 8005334:	694b      	ldreq	r3, [r1, #20]
 8005336:	600f      	str	r7, [r1, #0]
 8005338:	bf18      	it	ne
 800533a:	2300      	movne	r3, #0
 800533c:	eba6 0807 	sub.w	r8, r6, r7
 8005340:	608b      	str	r3, [r1, #8]
 8005342:	f1b8 0f00 	cmp.w	r8, #0
 8005346:	dd9c      	ble.n	8005282 <__sflush_r+0x1a>
 8005348:	6a21      	ldr	r1, [r4, #32]
 800534a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800534c:	4643      	mov	r3, r8
 800534e:	463a      	mov	r2, r7
 8005350:	4628      	mov	r0, r5
 8005352:	47b0      	blx	r6
 8005354:	2800      	cmp	r0, #0
 8005356:	dc06      	bgt.n	8005366 <__sflush_r+0xfe>
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	e78e      	b.n	8005284 <__sflush_r+0x1c>
 8005366:	4407      	add	r7, r0
 8005368:	eba8 0800 	sub.w	r8, r8, r0
 800536c:	e7e9      	b.n	8005342 <__sflush_r+0xda>
 800536e:	bf00      	nop
 8005370:	20400001 	.word	0x20400001

08005374 <_fflush_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	690b      	ldr	r3, [r1, #16]
 8005378:	4605      	mov	r5, r0
 800537a:	460c      	mov	r4, r1
 800537c:	b913      	cbnz	r3, 8005384 <_fflush_r+0x10>
 800537e:	2500      	movs	r5, #0
 8005380:	4628      	mov	r0, r5
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	b118      	cbz	r0, 800538e <_fflush_r+0x1a>
 8005386:	6983      	ldr	r3, [r0, #24]
 8005388:	b90b      	cbnz	r3, 800538e <_fflush_r+0x1a>
 800538a:	f7ff fa15 	bl	80047b8 <__sinit>
 800538e:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <_fflush_r+0x6c>)
 8005390:	429c      	cmp	r4, r3
 8005392:	d11b      	bne.n	80053cc <_fflush_r+0x58>
 8005394:	686c      	ldr	r4, [r5, #4]
 8005396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0ef      	beq.n	800537e <_fflush_r+0xa>
 800539e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053a0:	07d0      	lsls	r0, r2, #31
 80053a2:	d404      	bmi.n	80053ae <_fflush_r+0x3a>
 80053a4:	0599      	lsls	r1, r3, #22
 80053a6:	d402      	bmi.n	80053ae <_fflush_r+0x3a>
 80053a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053aa:	f7ff faa3 	bl	80048f4 <__retarget_lock_acquire_recursive>
 80053ae:	4628      	mov	r0, r5
 80053b0:	4621      	mov	r1, r4
 80053b2:	f7ff ff59 	bl	8005268 <__sflush_r>
 80053b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053b8:	07da      	lsls	r2, r3, #31
 80053ba:	4605      	mov	r5, r0
 80053bc:	d4e0      	bmi.n	8005380 <_fflush_r+0xc>
 80053be:	89a3      	ldrh	r3, [r4, #12]
 80053c0:	059b      	lsls	r3, r3, #22
 80053c2:	d4dd      	bmi.n	8005380 <_fflush_r+0xc>
 80053c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053c6:	f7ff fa96 	bl	80048f6 <__retarget_lock_release_recursive>
 80053ca:	e7d9      	b.n	8005380 <_fflush_r+0xc>
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <_fflush_r+0x70>)
 80053ce:	429c      	cmp	r4, r3
 80053d0:	d101      	bne.n	80053d6 <_fflush_r+0x62>
 80053d2:	68ac      	ldr	r4, [r5, #8]
 80053d4:	e7df      	b.n	8005396 <_fflush_r+0x22>
 80053d6:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <_fflush_r+0x74>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	bf08      	it	eq
 80053dc:	68ec      	ldreq	r4, [r5, #12]
 80053de:	e7da      	b.n	8005396 <_fflush_r+0x22>
 80053e0:	08005650 	.word	0x08005650
 80053e4:	08005670 	.word	0x08005670
 80053e8:	08005630 	.word	0x08005630

080053ec <_lseek_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d07      	ldr	r5, [pc, #28]	; (800540c <_lseek_r+0x20>)
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fc f89a 	bl	8001534 <_lseek>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_lseek_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_lseek_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	2000013c 	.word	0x2000013c

08005410 <__swhatbuf_r>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	460e      	mov	r6, r1
 8005414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005418:	2900      	cmp	r1, #0
 800541a:	b096      	sub	sp, #88	; 0x58
 800541c:	4614      	mov	r4, r2
 800541e:	461d      	mov	r5, r3
 8005420:	da08      	bge.n	8005434 <__swhatbuf_r+0x24>
 8005422:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	602a      	str	r2, [r5, #0]
 800542a:	061a      	lsls	r2, r3, #24
 800542c:	d410      	bmi.n	8005450 <__swhatbuf_r+0x40>
 800542e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005432:	e00e      	b.n	8005452 <__swhatbuf_r+0x42>
 8005434:	466a      	mov	r2, sp
 8005436:	f000 f8bb 	bl	80055b0 <_fstat_r>
 800543a:	2800      	cmp	r0, #0
 800543c:	dbf1      	blt.n	8005422 <__swhatbuf_r+0x12>
 800543e:	9a01      	ldr	r2, [sp, #4]
 8005440:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005444:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005448:	425a      	negs	r2, r3
 800544a:	415a      	adcs	r2, r3
 800544c:	602a      	str	r2, [r5, #0]
 800544e:	e7ee      	b.n	800542e <__swhatbuf_r+0x1e>
 8005450:	2340      	movs	r3, #64	; 0x40
 8005452:	2000      	movs	r0, #0
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	b016      	add	sp, #88	; 0x58
 8005458:	bd70      	pop	{r4, r5, r6, pc}
	...

0800545c <__smakebuf_r>:
 800545c:	898b      	ldrh	r3, [r1, #12]
 800545e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005460:	079d      	lsls	r5, r3, #30
 8005462:	4606      	mov	r6, r0
 8005464:	460c      	mov	r4, r1
 8005466:	d507      	bpl.n	8005478 <__smakebuf_r+0x1c>
 8005468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	6123      	str	r3, [r4, #16]
 8005470:	2301      	movs	r3, #1
 8005472:	6163      	str	r3, [r4, #20]
 8005474:	b002      	add	sp, #8
 8005476:	bd70      	pop	{r4, r5, r6, pc}
 8005478:	ab01      	add	r3, sp, #4
 800547a:	466a      	mov	r2, sp
 800547c:	f7ff ffc8 	bl	8005410 <__swhatbuf_r>
 8005480:	9900      	ldr	r1, [sp, #0]
 8005482:	4605      	mov	r5, r0
 8005484:	4630      	mov	r0, r6
 8005486:	f7ff fa57 	bl	8004938 <_malloc_r>
 800548a:	b948      	cbnz	r0, 80054a0 <__smakebuf_r+0x44>
 800548c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005490:	059a      	lsls	r2, r3, #22
 8005492:	d4ef      	bmi.n	8005474 <__smakebuf_r+0x18>
 8005494:	f023 0303 	bic.w	r3, r3, #3
 8005498:	f043 0302 	orr.w	r3, r3, #2
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	e7e3      	b.n	8005468 <__smakebuf_r+0xc>
 80054a0:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <__smakebuf_r+0x7c>)
 80054a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	6020      	str	r0, [r4, #0]
 80054a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ac:	81a3      	strh	r3, [r4, #12]
 80054ae:	9b00      	ldr	r3, [sp, #0]
 80054b0:	6163      	str	r3, [r4, #20]
 80054b2:	9b01      	ldr	r3, [sp, #4]
 80054b4:	6120      	str	r0, [r4, #16]
 80054b6:	b15b      	cbz	r3, 80054d0 <__smakebuf_r+0x74>
 80054b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054bc:	4630      	mov	r0, r6
 80054be:	f000 f889 	bl	80055d4 <_isatty_r>
 80054c2:	b128      	cbz	r0, 80054d0 <__smakebuf_r+0x74>
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	81a3      	strh	r3, [r4, #12]
 80054d0:	89a0      	ldrh	r0, [r4, #12]
 80054d2:	4305      	orrs	r5, r0
 80054d4:	81a5      	strh	r5, [r4, #12]
 80054d6:	e7cd      	b.n	8005474 <__smakebuf_r+0x18>
 80054d8:	08004751 	.word	0x08004751

080054dc <__malloc_lock>:
 80054dc:	4801      	ldr	r0, [pc, #4]	; (80054e4 <__malloc_lock+0x8>)
 80054de:	f7ff ba09 	b.w	80048f4 <__retarget_lock_acquire_recursive>
 80054e2:	bf00      	nop
 80054e4:	20000130 	.word	0x20000130

080054e8 <__malloc_unlock>:
 80054e8:	4801      	ldr	r0, [pc, #4]	; (80054f0 <__malloc_unlock+0x8>)
 80054ea:	f7ff ba04 	b.w	80048f6 <__retarget_lock_release_recursive>
 80054ee:	bf00      	nop
 80054f0:	20000130 	.word	0x20000130

080054f4 <_free_r>:
 80054f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054f6:	2900      	cmp	r1, #0
 80054f8:	d044      	beq.n	8005584 <_free_r+0x90>
 80054fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054fe:	9001      	str	r0, [sp, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f1a1 0404 	sub.w	r4, r1, #4
 8005506:	bfb8      	it	lt
 8005508:	18e4      	addlt	r4, r4, r3
 800550a:	f7ff ffe7 	bl	80054dc <__malloc_lock>
 800550e:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <_free_r+0x94>)
 8005510:	9801      	ldr	r0, [sp, #4]
 8005512:	6813      	ldr	r3, [r2, #0]
 8005514:	b933      	cbnz	r3, 8005524 <_free_r+0x30>
 8005516:	6063      	str	r3, [r4, #4]
 8005518:	6014      	str	r4, [r2, #0]
 800551a:	b003      	add	sp, #12
 800551c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005520:	f7ff bfe2 	b.w	80054e8 <__malloc_unlock>
 8005524:	42a3      	cmp	r3, r4
 8005526:	d908      	bls.n	800553a <_free_r+0x46>
 8005528:	6825      	ldr	r5, [r4, #0]
 800552a:	1961      	adds	r1, r4, r5
 800552c:	428b      	cmp	r3, r1
 800552e:	bf01      	itttt	eq
 8005530:	6819      	ldreq	r1, [r3, #0]
 8005532:	685b      	ldreq	r3, [r3, #4]
 8005534:	1949      	addeq	r1, r1, r5
 8005536:	6021      	streq	r1, [r4, #0]
 8005538:	e7ed      	b.n	8005516 <_free_r+0x22>
 800553a:	461a      	mov	r2, r3
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	b10b      	cbz	r3, 8005544 <_free_r+0x50>
 8005540:	42a3      	cmp	r3, r4
 8005542:	d9fa      	bls.n	800553a <_free_r+0x46>
 8005544:	6811      	ldr	r1, [r2, #0]
 8005546:	1855      	adds	r5, r2, r1
 8005548:	42a5      	cmp	r5, r4
 800554a:	d10b      	bne.n	8005564 <_free_r+0x70>
 800554c:	6824      	ldr	r4, [r4, #0]
 800554e:	4421      	add	r1, r4
 8005550:	1854      	adds	r4, r2, r1
 8005552:	42a3      	cmp	r3, r4
 8005554:	6011      	str	r1, [r2, #0]
 8005556:	d1e0      	bne.n	800551a <_free_r+0x26>
 8005558:	681c      	ldr	r4, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	6053      	str	r3, [r2, #4]
 800555e:	4421      	add	r1, r4
 8005560:	6011      	str	r1, [r2, #0]
 8005562:	e7da      	b.n	800551a <_free_r+0x26>
 8005564:	d902      	bls.n	800556c <_free_r+0x78>
 8005566:	230c      	movs	r3, #12
 8005568:	6003      	str	r3, [r0, #0]
 800556a:	e7d6      	b.n	800551a <_free_r+0x26>
 800556c:	6825      	ldr	r5, [r4, #0]
 800556e:	1961      	adds	r1, r4, r5
 8005570:	428b      	cmp	r3, r1
 8005572:	bf04      	itt	eq
 8005574:	6819      	ldreq	r1, [r3, #0]
 8005576:	685b      	ldreq	r3, [r3, #4]
 8005578:	6063      	str	r3, [r4, #4]
 800557a:	bf04      	itt	eq
 800557c:	1949      	addeq	r1, r1, r5
 800557e:	6021      	streq	r1, [r4, #0]
 8005580:	6054      	str	r4, [r2, #4]
 8005582:	e7ca      	b.n	800551a <_free_r+0x26>
 8005584:	b003      	add	sp, #12
 8005586:	bd30      	pop	{r4, r5, pc}
 8005588:	20000134 	.word	0x20000134

0800558c <_read_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4d07      	ldr	r5, [pc, #28]	; (80055ac <_read_r+0x20>)
 8005590:	4604      	mov	r4, r0
 8005592:	4608      	mov	r0, r1
 8005594:	4611      	mov	r1, r2
 8005596:	2200      	movs	r2, #0
 8005598:	602a      	str	r2, [r5, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	f7fb ff6a 	bl	8001474 <_read>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_read_r+0x1e>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_read_r+0x1e>
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	2000013c 	.word	0x2000013c

080055b0 <_fstat_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4d07      	ldr	r5, [pc, #28]	; (80055d0 <_fstat_r+0x20>)
 80055b4:	2300      	movs	r3, #0
 80055b6:	4604      	mov	r4, r0
 80055b8:	4608      	mov	r0, r1
 80055ba:	4611      	mov	r1, r2
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	f7fb ff9e 	bl	80014fe <_fstat>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	d102      	bne.n	80055cc <_fstat_r+0x1c>
 80055c6:	682b      	ldr	r3, [r5, #0]
 80055c8:	b103      	cbz	r3, 80055cc <_fstat_r+0x1c>
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	bd38      	pop	{r3, r4, r5, pc}
 80055ce:	bf00      	nop
 80055d0:	2000013c 	.word	0x2000013c

080055d4 <_isatty_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4d06      	ldr	r5, [pc, #24]	; (80055f0 <_isatty_r+0x1c>)
 80055d8:	2300      	movs	r3, #0
 80055da:	4604      	mov	r4, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	602b      	str	r3, [r5, #0]
 80055e0:	f7fb ff9d 	bl	800151e <_isatty>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_isatty_r+0x1a>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_isatty_r+0x1a>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	2000013c 	.word	0x2000013c

080055f4 <_init>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr

08005600 <_fini>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr
